const ActionFlags = require('./Step').ActionFlags;
const ParameterMappingKeys = require('./Step').ParameterMappingKeys;
const StepList = require('./Step').StepList;
const StepResult = require('./Step').StepResult;
const StepType = require('./Step').StepType;
const buildStep = require('./Step').buildStep;
const buildStepList = require('./Step').buildStepList;
const Entity = require('../typedef/Entity');
const Combat = require('../internal/Combat');
const Get = require("./Getter").Get;
const ItemDetail = require("./ItemDetail").ItemDetail;
const ItemStates = require('../def/interface/ItemStateDef').ItemStates;
const EssenceValue = require("./Essence").EssenceValue;
const ShardCatalog = require("./Essence").ShardCatalog;
const EssenceCatalog = require("./Essence").EssenceCatalog;
const SpriteColor = require('./Model').SpriteColor;

module.exports.ItemStackTypes = ItemStackTypes = {
    NONE: 0,
    NORMAL: 1,
    ALL: 2,
};

module.exports.isItemStackable = (id) => {
    return Item[id].stackable;
}

module.exports.getItemValue = (id) => {
    return Item[id].value;
}

module.exports.getItemName = (id) => {
    return Item[id].name;
}

module.exports.getItemDescription = (id) => {
    return Item[id].description;
}

module.exports.ItemGroup = ItemGroup = [{
    id: 0,
    name: 'Currency',
    skillID: -1,
}, {
    id: 1,
    name: 'Axe',
    skillID: 9,
}, {
    id: 2,
    name: 'Pickaxe',
    skillID: 10,
}, {
    id: 3,
    name: 'Fishing Net',
    skillID: 12,
}, {
    id: 4,
    name: 'Raw Fish',
    skillID: 13,
}, {
    id: 5,
    name: 'Cooked Fish',
    skillID: 11,
}, {
    id: 6,
    name: 'Arrow',
    skillID: 6,
}, {
    id: 7,
    name: 'Log',
    skillID: 9,
}, {
    id: 8,
    name: 'Ore',
    skillID: 10,
}];

const Item = Object.freeze([
    {
        id: 0,
        name: 'Coins',
        noted: false,
        value: 1,
        stackable: true,
        description: 'Some stamped gold coins.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(1, 17, 'INCINERATE'),
        ]),
        spriteIndex: 1,
        itemGroup: 0,
        essenceValue: EssenceValue(1, 0, [ShardCatalog.METAL(1)]),
    },
    Get.Item.Axe(1, 131, 'Copper Axe', 19, 2, 2, 1, 15, 1, [2, 4, 0, 0, 0, 0, 0, 0, -1], 1),
    Get.Item.Axe(2, 132, 'Iron Axe', 54, 3, 6, 10, 16, 10, [4, 8, 0, 0, 0, 0, 0, 0, -2], 2),
    Get.Item.Axe(3, 133, 'Steel Axe', 112, 4, 10, 20, 17, 20, [6, 12, 0, 0, 0, 0, 0, 0, -3], 3),
    Get.Item.Axe(4, 134, 'Nelenite Axe', 260, 5, 16, 30, 18, 30, [8, 16, 0, 0, 0, 0, 0, 0, -4], 4),
    Get.Item.Logs(5, 135, undefined, 2, 6, 1),
    Get.Item.Logs(6, 136, 'Oak', 6, 7, 10),
    Get.Item.Logs(7, 137, 'Ash', 12, 8, 20),
    Get.Item.Logs(8, 138, 'Fur', 26, 9, 30),
    Get.Item.Pickaxe(9, 139, 'Copper Pickaxe', 34, 10, 2, 1, 15, 1, [1, 5, 0, 0, 0, 0, 0, 0, -1], 1),
    Get.Item.Pickaxe(10, 140, 'Iron Pickaxe', 106, 11, 6, 10, 16, 10, [2, 10, 0, 0, 0, 0, 0, 0, -2], 2),
    Get.Item.Pickaxe(11, 141, 'Steel Pickaxe', 218, 12, 10, 20, 17, 20, [3, 15, 0, 0, 0, 0, 0, 0, -3], 3),
    Get.Item.Pickaxe(12, 142, 'Nelenite Pickaxe', 514, 13, 16, 30, 18, 30, [4, 20, 0, 0, 0, 0, 0, 0, -4], 4),
    Get.Item.Dagger(13, 143, 'Copper Dagger', 1, 19, 14, 15, 1, [7, 2, 0, 0, 0, 0, 0, 0, 0]),
    Get.Item.Dagger(14, 144, 'Iron Dagger', 2, 54, 15, 16, 10, [14, 4, 0, 0, 0, 0, 0, 0, 0]),
    Get.Item.Dagger(15, 145, 'Steel Dagger', 3, 112, 16, 17, 20, [21, 6, 0, 0, 0, 0, 0, 0, 0]),
    Get.Item.Dagger(16, 146, 'Nelenite Dagger', 4, 260, 17, 18, 30, [28, 8, 0, 0, 0, 0, 0, 0, 0]),
    Get.Item.Sword(17, 147, 'Copper Sword', 1, 34, 18, 15, 1, [5, 6, 1, 0, 0, 0, 0, 0, 0]),
    Get.Item.Sword(18, 148, 'Iron Sword', 2, 106, 19, 16, 10, [10, 12, 2, 0, 0, 0, 0, 0, 0]),
    Get.Item.Sword(19, 149, 'Steel Sword', 3, 218, 20, 17, 20, [15, 18, 3, 0, 0, 0, 0, 0, 0]),
    Get.Item.Sword(20, 150, 'Nelenite Sword', 4, 514, 21, 18, 30, [20, 24, 4, 0, 0, 0, 0, 0, 0]),
    Get.Item.Helmet(21, 151, 'Copper Helmet', 1, 34, 22, 7, 1, [0, 0, 4, 0, 0, 1, -2, -2, -2]),
    Get.Item.Helmet(22, 152, 'Iron Helmet', 2, 106, 23, 8, 10, [0, 0, 8, 0, 0, 2, -4, -4, -4]),
    Get.Item.Helmet(23, 153, 'Steel Helmet', 3, 218, 24, 9, 20, [0, 0, 12, 0, 0, 3, -6, -6, -6]),
    Get.Item.Helmet(24, 154, 'Nelenite Helmet', 4, 514, 25, 10, 30, [0, 0, 16, 0, 0, 4, -8, -8, -8]),
    Get.Item.FullHelm(25, 155, 'Copper Full Helm', 1, 54, 26, 7, 1, [0, 0, 6, 0, 0, 2, -2, -2, -3]),
    Get.Item.FullHelm(26, 156, 'Iron Full Helm', 2, 158, 27, 8, 10, [0, 0, 12, 0, 0, 4, -4, -4, -6]),
    Get.Item.FullHelm(27, 157, 'Steel Full Helm', 3, 332, 28, 9, 20, [0, 0, 18, 0, 0, 6, -6, -6, -9]),
    Get.Item.FullHelm(28, 158, 'Nelenite Full Helm', 4, 762, 29, 10, 30, [0, 0, 24, 0, 0, 8, -8, -8, -12]),
    Get.Item.Platelegs(29, 159, 'Copper Platelegs', 1, 68, 30, 7, 1, [0, 1, 10, 0, 0, 5, -5, -5, -8]),
    Get.Item.Platelegs(30, 160, 'Iron Platelegs', 2, 214, 31, 8, 10, [0, 2, 20, 0, 0, 10, -10, -10, -16]),
    Get.Item.Platelegs(31, 161, 'Steel Platelegs', 3, 442, 32, 9, 20, [0, 3, 30, 0, 0, 15, -15, -15, -24]),
    Get.Item.Platelegs(32, 162, 'Nelenite Platelegs', 4, 1020, 33, 10, 30, [0, 4, 40, 0, 0, 20, -20, -20, -32]),
    Get.Item.UnstrungBow(33, 163, undefined, 4, 34, 1, 37, 25, 1),
    Get.Item.UnstrungBow(34, 164, 'Oak', 8, 35, 10, 38, 50, 2),
    Get.Item.UnstrungBow(35, 165, 'Ash', 18, 36, 20, 39, 75, 3),
    Get.Item.UnstrungBow(36, 166, 'Fur', 34, 37, 30, 40, 100, 4),
    Get.Item.Bow(37, 167, 'Bow', 28, 38, [0, 0, 0, 4, 4, 0, 0, 0, 1], 1, 1, [68, 69]),
    Get.Item.Bow(38, 168, 'Oak Bow', 39, 39, [0, 0, 0, 8, 8, 0, 0, 0, 2], 2, 10, [68, 69, 70]),
    Get.Item.Bow(39, 169, 'Ash Bow', 56, 40, [0, 0, 0, 12, 12, 0, 0, 0, 3], 3, 20, [68, 69, 70, 558, 71]),
    Get.Item.Bow(40, 170, 'Fur Bow', 85, 41, [0, 0, 0, 16, 16, 0, 0, 0, 4], 4, 30, [68, 69, 70, 558, 71, 276]),
    {
        id: 41,
        name: 'Bowstring',
        noted: false,
        value: 8,
        stackable: true,
        description: 'A string used to make a bow.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(1, 15, 'CRAFT'),
            ItemDetail.levelSkillDetail('5+', 16, 'CRAFT'),
            ItemDetail.levelSkillDetail(4, 17, 'INCINERATE'),
        ]),
        spriteIndex: 42,
        essenceValue: EssenceValue(4, 3, [ShardCatalog.AIR(20), ShardCatalog.EARTH(14), ShardCatalog.NATURE(14), ShardCatalog.BIND(50)]),
    },
    Get.Item.Platebody(42, 172, 'Copper Platebody', 1, 86, 43, 7, 1, [0, 1, 14, 0, 0, 7, -7, -7, -10]),
    Get.Item.Platebody(43, 173, 'Iron Platebody', 2, 268, 44, 8, 10, [0, 2, 28, 0, 0, 14, -14, -14, -20]),
    Get.Item.Platebody(44, 174, 'Steel Platebody', 3, 538, 45, 9, 20, [0, 3, 42, 0, 0, 21, -21, -21, -30]),
    Get.Item.Platebody(45, 175, 'Nelenite Platebody', 4, 538, 46, 10, 30, [0, 4, 56, 0, 0, 28, -28, -28, -40]),
    {
        id: 46,
        name: 'Matchbox',
        noted: false,
        value: 1,
        stackable: true,
        description: 'A box with some matches.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('1+', 17, 'USE'),
            ItemDetail.levelSkillDetail(1, 17, 'INCINERATE'),
        ]),
        spriteIndex: 47,
        essenceValue: EssenceValue(1, 1, [ShardCatalog.FIRE(5), ShardCatalog.EARTH(1)]),
        useActions: [
            Get.Action.LightFire(9, 5, 1, 10, 1, 2, 25),
            Get.Action.LightFire(10, 6, 10, 15, 2, 5, 50),
            Get.Action.LightFire(11, 7, 20, 20, 7, 10, 75),
            Get.Action.LightFire(12, 8, 30, 25, 13, 18, 100),
            Get.Action.LightFire(13, 315, 40, 30, 20, 25, 125),
            Get.Action.LightFire(14, 317, 50, 35, 28, 35, 150),
        ],
    },
    Get.Item.RawFish(47, 176, 'Shrimp', 2, 1, 1, 5, 48, EssenceValue(5, 3, [ShardCatalog.WATER(25), ShardCatalog.NATURE(2)])),
    Get.Item.RawFish(48, 177, 'Sardine', 5, 10, 10, 10, 49, EssenceValue(10, 4, [ShardCatalog.WATER(50), ShardCatalog.NATURE(3)])),
    Get.Item.RawFish(49, 178, 'Herring', 12, 20, 20, 15, 50, EssenceValue(15, 5, [ShardCatalog.WATER(75), ShardCatalog.NATURE(4)])),
    Get.Item.RawFish(50, 179, 'Mullet', 20, 30, 30, 20, 51, EssenceValue(20, 6, [ShardCatalog.WATER(100), ShardCatalog.NATURE(5)])),
    {
        id: 51,
        name: 'Shrimp',
        noted: false,
        notedID: 180,
        value: 4,
        stackable: false,
        description: 'Some cooked shrimp. Heals 3 hitpoints.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('1', 13, 'CRAFT'),
            ItemDetail.levelSkillDetail(7, 17, 'INCINERATE'),
        ]),
        spriteIndex: 52,
        essenceValue: EssenceValue(7, 4, [ShardCatalog.WATER(5), ShardCatalog.NATURE(5), ShardCatalog.FIRE(10)]),
        actions: [{
            actionInterval: 0,
            interfaceID: 5,
            id: 18,
            name: 'Eat',
            steps: [
                [buildStep(StepType.HAS_INVENTORY_ITEM, { params: [51, 1] }),
                buildStep(StepType.IS_TIMER_EXPIRED, { params: [8] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [51, 1] }),
                buildStep(StepType.EAT_FOOD, { params: [3] })]
            ],
        }],
    },
    {
        id: 52,
        name: 'Sardine',
        noted: false,
        notedID: 181,
        value: 7,
        stackable: false,
        description: 'A cooked sardine. Heals 4 hitpoints.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('10', 13, 'CRAFT'),
            ItemDetail.levelSkillDetail(13, 17, 'INCINERATE'),
        ]),
        spriteIndex: 53,
        essenceValue: EssenceValue(13, 5, [ShardCatalog.WATER(8), ShardCatalog.NATURE(6), ShardCatalog.FIRE(20)]),
        actions: [{
            actionInterval: 0,
            interfaceID: 5,
            id: 18,
            name: 'Eat',
            steps: [
                [buildStep(StepType.HAS_INVENTORY_ITEM, { params: [52, 1] }),
                buildStep(StepType.IS_TIMER_EXPIRED, { params: [8] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [52, 1] }),
                buildStep(StepType.EAT_FOOD, { params: [4] })]
            ],
        }],
    },
    {
        id: 53,
        name: 'Herring',
        noted: false,
        notedID: 182,
        value: 16,
        stackable: false,
        description: 'A cooked herring. Heals 5 hitpoints.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('20', 13, 'CRAFT'),
            ItemDetail.levelSkillDetail(18, 17, 'INCINERATE'),
        ]),
        spriteIndex: 54,
        essenceValue: EssenceValue(18, 6, [ShardCatalog.WATER(11), ShardCatalog.NATURE(7), ShardCatalog.FIRE(30)]),
        actions: [{
            actionInterval: 0,
            interfaceID: 5,
            id: 18,
            name: 'Eat',
            steps: [
                [buildStep(StepType.HAS_INVENTORY_ITEM, { params: [53, 1] }),
                buildStep(StepType.IS_TIMER_EXPIRED, { params: [8] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [53, 1] }),
                buildStep(StepType.EAT_FOOD, { params: [5] })]
            ],
        }],
    },
    {
        id: 54,
        name: 'Mullet',
        noted: false,
        notedID: 183,
        value: 25,
        stackable: false,
        description: 'A cooked mullet. Heals 6 hitpoints.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('30', 13, 'CRAFT'),
            ItemDetail.levelSkillDetail(23, 17, 'INCINERATE'),
        ]),
        spriteIndex: 55,
        essenceValue: EssenceValue(23, 7, [ShardCatalog.WATER(14), ShardCatalog.NATURE(8), ShardCatalog.FIRE(40)]),
        actions: [{
            actionInterval: 0,
            interfaceID: 5,
            id: 18,
            name: 'Eat',
            steps: [
                [buildStep(StepType.HAS_INVENTORY_ITEM, { params: [54, 1] }),
                buildStep(StepType.IS_TIMER_EXPIRED, { params: [8] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [54, 1] }),
                buildStep(StepType.EAT_FOOD, { params: [6] })]
            ],
        }],
    },
    {
        id: 55,
        name: 'Copper Ore',
        noted: false,
        notedID: 184,
        value: 5,
        stackable: false,
        description: 'A copper ore for smelting into copper bars.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('1', 10, 'GATHER'),
            ItemDetail.levelSkillDetail('1', 14, 'CRAFT'),
            ItemDetail.levelSkillDetail(18, 17, 'INCINERATE'),
        ]),
        spriteIndex: 56,
        essenceValue: EssenceValue(18, 4, [ShardCatalog.EARTH(10), ShardCatalog.METAL(5)]),
    },
    {
        id: 56,
        name: 'Iron Ore',
        noted: false,
        notedID: 185,
        value: 16,
        stackable: false,
        description: 'An iron ore used to make iron and steel bars.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('10', 10, 'GATHER'),
            ItemDetail.levelSkillDetail('10', 14, 'CRAFT'),
            ItemDetail.levelSkillDetail(24, 17, 'INCINERATE'),
        ]),
        spriteIndex: 57,
        essenceValue: EssenceValue(24, 8, [ShardCatalog.EARTH(20), ShardCatalog.METAL(10)]),
    },
    {
        id: 57,
        name: 'Coal',
        noted: false,
        notedID: 186,
        value: 32,
        stackable: false,
        description: 'A fuel and heat source.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('20', 10, 'GATHER'),
            ItemDetail.levelSkillDetail('20', 14, 'CRAFT'),
            ItemDetail.levelSkillDetail(30, 17, 'INCINERATE'),
        ]),
        spriteIndex: 58,
        essenceValue: EssenceValue(30, 12, [ShardCatalog.EARTH(30), ShardCatalog.METAL(15)]),
    },
    {
        id: 58,
        name: 'Nelenite Ore',
        noted: false,
        notedID: 187,
        value: 60,
        stackable: false,
        description: 'A chunk of nelenite ore.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('30', 10, 'GATHER'),
            ItemDetail.levelSkillDetail('30', 14, 'CRAFT'),
            ItemDetail.levelSkillDetail(36, 17, 'INCINERATE'),
        ]),
        spriteIndex: 59,
        essenceValue: EssenceValue(36, 16, [ShardCatalog.EARTH(40), ShardCatalog.METAL(20)]),
    },
    {
        id: 59,
        name: 'Copper Bar',
        noted: false,
        notedID: 188,
        value: 14,
        stackable: false,
        description: 'An ingot of copper. I should use this on an anvil.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('1', 14, 'GATHER'),
            ItemDetail.levelSkillDetail('1-10', 14, 'CRAFT'),
            ItemDetail.levelSkillDetail(20, 17, 'INCINERATE'),
        ]),
        spriteIndex: 60,
        essenceValue: EssenceValue(20, 10, [ShardCatalog.EARTH(15), ShardCatalog.METAL(10), ShardCatalog.FIRE(40), ShardCatalog.FORCE(20)]),
    },
    {
        id: 60,
        name: 'Iron Bar',
        noted: false,
        notedID: 189,
        value: 48,
        stackable: false,
        description: 'An ingot of iron.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('10', 14, 'GATHER'),
            ItemDetail.levelSkillDetail('10-20', 14, 'CRAFT'),
            ItemDetail.levelSkillDetail(25, 17, 'INCINERATE'),
        ]),
        spriteIndex: 61,
        essenceValue: EssenceValue(25, 25, [ShardCatalog.EARTH(30), ShardCatalog.METAL(20), ShardCatalog.FIRE(80), ShardCatalog.FORCE(40)]),
    },
    {
        id: 61,
        name: 'Steel Bar',
        noted: false,
        notedID: 190,
        value: 100,
        stackable: false,
        description: 'An ingot of steel.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('20', 14, 'GATHER'),
            ItemDetail.levelSkillDetail('20-30', 14, 'CRAFT'),
            ItemDetail.levelSkillDetail(30, 17, 'INCINERATE'),
        ]),
        spriteIndex: 62,
        essenceValue: EssenceValue(30, 34, [ShardCatalog.EARTH(45), ShardCatalog.METAL(30), ShardCatalog.FIRE(120), ShardCatalog.FORCE(60)]),
    },
    {
        id: 62,
        name: 'Nelenite Bar',
        noted: false,
        notedID: 191,
        value: 240,
        stackable: false,
        description: 'An ingot of nelenite.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('30', 14, 'GATHER'),
            ItemDetail.levelSkillDetail('30-40', 14, 'CRAFT'),
            ItemDetail.levelSkillDetail(35, 17, 'INCINERATE'),
        ]),
        spriteIndex: 63,
        essenceValue: EssenceValue(35, 56, [ShardCatalog.EARTH(60), ShardCatalog.METAL(40), ShardCatalog.FIRE(160), ShardCatalog.FORCE(80)]),
    },
    {
        id: 63,
        name: 'Hammer',
        noted: false,
        notedID: 192,
        value: 4,
        stackable: false,
        description: 'Used to hammer metal.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('1', 14, 'USE'),
            ItemDetail.levelSkillDetail(8, 17, 'INCINERATE'),
        ]),
        spriteIndex: 64,
        essenceValue: EssenceValue(8, 2, [ShardCatalog.EARTH(8), ShardCatalog.METAL(8), ShardCatalog.FORCE(2)]),
    },
    Get.Item.Arrowheads(64, 68, 'Copper Arrowheads', 1, 65, 5, 1, 1),
    Get.Item.Arrowheads(65, 69, 'Iron Arrowheads', 3, 66, 10, 10, 2),
    Get.Item.Arrowheads(66, 70, 'Steel Arrowheads', 6, 67, 15, 20, 3),
    Get.Item.Arrowheads(67, 71, 'Nelenite Arrowheads', 11, 68, 20, 30, 4),
    Get.Item.Arrows(68, 'Copper Arrows', 3, 69, 1, [0, 0, 0, 4, 4, 0, 0, 0, 0], 0),
    Get.Item.Arrows(69, 'Iron Arrows', 6, 70, 10, [0, 0, 0, 8, 8, 0, 0, 0, 0], 1),
    Get.Item.Arrows(70, 'Steel Arrows', 9, 71, 20, [0, 0, 0, 12, 12, 0, 0, 0, 0], 2),
    Get.Item.Arrows(71, 'Nelenite Arrows', 18, 72, 30, [0, 0, 0, 16, 16, 0, 0, 0, 0], 3),
    {
        id: 72,
        name: 'Headless Arrows',
        noted: false,
        value: 2,
        stackable: true,
        description: 'Arrows without arrowheads.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(1, 16, 'CRAFT'),
            ItemDetail.levelSkillDetail(3, 17, 'INCINERATE'),
        ]),
        spriteIndex: 73,
        essenceValue: EssenceValue(3, 1, [ShardCatalog.EARTH(4), ShardCatalog.NATURE(2), ShardCatalog.AIR(8)]),
    },
    {
        id: 73,
        name: 'Feathers',
        noted: false,
        value: 1,
        stackable: true,
        description: 'Great for arrows.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(1, 16, 'CRAFT'),
            ItemDetail.levelSkillDetail(2, 17, 'INCINERATE'),
        ]),
        spriteIndex: 74,
        essenceValue: EssenceValue(2, 1, [ShardCatalog.NATURE(1), ShardCatalog.AIR(4)]),
    },
    {
        id: 74,
        name: 'Arrow Shafts',
        noted: false,
        value: 1,
        stackable: true,
        description: 'Long sticks. Needs feathers and arrowheads.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(1, 16, 'CRAFT'),
            ItemDetail.levelSkillDetail(1, 17, 'INCINERATE'),
        ]),
        spriteIndex: 75,
        essenceValue: EssenceValue(1, 1, [ShardCatalog.AIR(1), ShardCatalog.EARTH(2), ShardCatalog.NATURE(1)]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 73,
            actionInterval: 0,
            flags: ['REPEAT_ACTION'],
            steps: [
                [buildStep(StepType.COMBINE_ITEMS, { params: [74, 73, 72, 5, 16, 5] })]
            ],
        }],
    },
    {
        id: 75,
        name: 'Clay',
        noted: false,
        notedID: 193,
        value: 2,
        stackable: false,
        description: 'A piece of clay ready to be moulded on a wheel.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('10+', 15, 'CRAFT'),
            ItemDetail.levelSkillDetail(4, 17, 'INCINERATE'),
        ]),
        spriteIndex: 76,
        essenceValue: EssenceValue(4, 2, [ShardCatalog.EARTH(8), ShardCatalog.NATURE(1)]),
    },
    {
        id: 76,
        name: 'Ashes',
        noted: false,
        value: 2,
        stackable: true,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('1+', 17, 'GATHER'),
            ItemDetail.levelSkillDetail('1+', 19, 'USE'),
            ItemDetail.levelSkillDetail(8, 17, 'INCINERATE'),
        ]),
        spriteIndex: 77,
        essenceValue: EssenceValue(8, 2, [ShardCatalog.AIR(10), ShardCatalog.EARTH(4), ShardCatalog.VOID(1), ShardCatalog.FIRE(2)]),
    },
    {
        id: 77,
        name: 'Clay Pot',
        noted: false,
        value: 5,
        stackable: true,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('10', 15, 'CRAFT'),
            ItemDetail.levelSkillDetail(13, 17, 'INCINERATE'),
        ]),
        spriteIndex: 78,
        essenceValue: EssenceValue(13, 3, [ShardCatalog.EARTH(20), ShardCatalog.NATURE(10), ShardCatalog.FIRE(20)]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 76,
            actionInterval: 1,
            flags: ['REPEAT_ACTION'],
            steps: [
                [buildStep(StepType.HAS_INVENTORY_ITEM, { params: [77, 1] }),
                buildStep(StepType.HAS_INVENTORY_ITEM, { params: [76, 1] }),
                buildStep(StepType.HAS_SKILL_LEVEL, { params: [19, 1] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [77, 1] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [76, 1] }),
                buildStep(StepType.GIVE_INVENTORY_ITEM, { params: [82, 1] }),
                buildStep(StepType.GIVE_XP, { params: [19, 10] }),
                buildStep(StepType.PLAY_ANIMATION, {params: ['ACTION_BOTHHANDS']}),
                buildStep(StepType.SEND_CLIENT_MESSAGE, { params: ['You line the inside of the pot with ashes.'] })],
            ],
        }],
    },
    {
        id: 78,
        name: 'Air Essence',
        noted: false,
        value: 8,
        stackable: true,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('1+', 19, 'USE'),
            ItemDetail.levelSkillDetail(40, 17, 'INCINERATE'),
        ]),
        spriteIndex: 79,
        essenceValue: EssenceValue(40, 0, [ShardCatalog.AIR(90)]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 82,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[75, 76, 77, 78, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 79, 80, 81, 82, 194, 195, 239, 240]] })]
            ],
        }],
    },
    {
        id: 79,
        name: 'Water Essence',
        noted: false,
        value: 12,
        stackable: true,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('2+', 19, 'USE'),
            ItemDetail.levelSkillDetail(42, 17, 'INCINERATE'),
        ]),
        spriteIndex: 80,
        essenceValue: EssenceValue(42, 0, [ShardCatalog.WATER(90)]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 82,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[76, 230, 235, 80, 239]] })]
            ],
        }],
    },
    {
        id: 80,
        name: 'Earth Essence',
        noted: false,
        value: 16,
        stackable: true,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('4+', 19, 'USE'),
            ItemDetail.levelSkillDetail(44, 17, 'INCINERATE'),
        ]),
        spriteIndex: 81,
        essenceValue: EssenceValue(44, 0, [ShardCatalog.EARTH(90)]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 82,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[77, 231, 236, 81, 194, 239, 240]] })]
            ],
        }],
    },
    {
        id: 81,
        name: 'Fire Essence',
        noted: false,
        value: 22,
        stackable: true,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('6+', 19, 'USE'),
            ItemDetail.levelSkillDetail(46, 17, 'INCINERATE'),
        ]),
        spriteIndex: 82,
        essenceValue: EssenceValue(46, 0, [ShardCatalog.FIRE(90)]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 82,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[78, 232, 237, 82, 194]] })]
            ],
        }],
    },
    {
        id: 82,
        name: 'Pot of Ashes',
        noted: false,
        value: 6,
        stackable: true,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('1', 19, 'CRAFT'),
            ItemDetail.levelSkillDetail(19, 17, 'INCINERATE'),
        ]),
        spriteIndex: 83,
        essenceValue: EssenceValue(19, 5, [ShardCatalog.EARTH(34), ShardCatalog.NATURE(10), ShardCatalog.FIRE(50), ShardCatalog.VOID(5)]),
    },
    {
        id: 83,
        name: 'Lesser Air Wound',
        noted: false,
        value: 5,
        stackable: true,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('1', 19, 'CRAFT'),
            ItemDetail.levelSkillDetail(50, 17, 'INCINERATE'),
        ]),
        projectileID: 6,
        spriteIndex: 84,
        combatStyle: Combat.CombatStyle.MAGIC,
        attackRange: 5,
        attackCooldown: 5,
        equipmentStats: [0, 0, 0, 0, 0, 0, 0, 0, 0],
        spellID: 0,
        essenceValue: EssenceValue(50, 5, [ShardCatalog.AIR(195), ShardCatalog.EARTH(14), ShardCatalog.NATURE(1), ShardCatalog.FIRE(5), ShardCatalog.FORCE(10)]),
        model: {
            RIGHT_TOOL: {
                id: 'RIGHT_TOOL',
                asset: 'heldParts',
                sprite: 'strike',
                parent: 'RIGHT_FOREARM',
                spriteID: 1,
                anchor: { x: 0.95, y: 0.5 },
                position: { x: 0.75, y: 0.75 },
                rotation: 0,
                UIModel: null,
            },
        },
        actions: [{
            interfaceID: 5,
            id: 4,
            name: 'Equip',
            steps: [
                [buildStep(StepType.HAS_SKILL_LEVEL, { params: [6, 1] }),
                buildStep(StepType.PLAY_ANIMATION, { params: ['EQUIP_SPELL'] }),
                buildStep(StepType.GIVE_EQUIPMENT_ITEM, { params: [1, 'ITEM_ID', 'ITEM_STATE'] })]
            ]
        }],
    },
    {
        id: 84,
        name: 'Lesser Water Wound',
        noted: false,
        value: 9,
        stackable: true,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('2', 19, 'CRAFT'),
            ItemDetail.levelSkillDetail(52, 17, 'INCINERATE'),
        ]),
        projectileID: 7,
        spriteIndex: 85,
        combatStyle: Combat.CombatStyle.MAGIC,
        attackRange: 5,
        attackCooldown: 5,
        equipmentStats: [0, 0, 0, 0, 0, 0, 0, 0, 0],
        spellID: 1,
        essenceValue: EssenceValue(52, 5, [ShardCatalog.AIR(195), ShardCatalog.EARTH(14), ShardCatalog.NATURE(1), ShardCatalog.WATER(90), ShardCatalog.FIRE(5), ShardCatalog.FORCE(10)]),
        model: {
            RIGHT_TOOL: {
                id: 'RIGHT_TOOL',
                asset: 'heldParts',
                sprite: 'strike',
                parent: 'RIGHT_FOREARM',
                spriteID: 2,
                anchor: { x: 0.95, y: 0.5 },
                position: { x: 0.75, y: 0.75 },
                rotation: 0,
                UIModel: null,
            },
        },
        actions: [{
            interfaceID: 5,
            id: 4,
            name: 'Equip',
            steps: [
                [buildStep(StepType.HAS_SKILL_LEVEL, { params: [6, 10] }),
                buildStep(StepType.PLAY_ANIMATION, { params: ['EQUIP_SPELL'] }),
                buildStep(StepType.GIVE_EQUIPMENT_ITEM, { params: [1, 'ITEM_ID', 'ITEM_STATE'] })]
            ]
        }],
    },
    {
        id: 85,
        name: 'Lesser Earth Wound',
        noted: false,
        value: 11,
        stackable: true,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('4', 19, 'CRAFT'),
            ItemDetail.levelSkillDetail(54, 17, 'INCINERATE'),
        ]),
        projectileID: 8,
        spriteIndex: 86,
        combatStyle: Combat.CombatStyle.MAGIC,
        attackRange: 5,
        attackCooldown: 5,
        equipmentStats: [0, 0, 0, 0, 0, 0, 0, 0, 0],
        spellID: 2,
        essenceValue: EssenceValue(54, 5, [ShardCatalog.AIR(195), ShardCatalog.EARTH(104), ShardCatalog.NATURE(1), ShardCatalog.FIRE(5), ShardCatalog.FORCE(10)]),
        model: {
            RIGHT_TOOL: {
                id: 'RIGHT_TOOL',
                asset: 'heldParts',
                sprite: 'strike',
                parent: 'RIGHT_FOREARM',
                spriteID: 3,
                anchor: { x: 0.95, y: 0.5 },
                position: { x: 0.75, y: 0.75 },
                rotation: 0,
                UIModel: null,
            },
        },
        actions: [{
            interfaceID: 5,
            id: 4,
            name: 'Equip',
            steps: [
                [buildStep(StepType.HAS_SKILL_LEVEL, { params: [6, 20] }),
                buildStep(StepType.PLAY_ANIMATION, { params: ['EQUIP_SPELL'] }),
                buildStep(StepType.GIVE_EQUIPMENT_ITEM, { params: [1, 'ITEM_ID', 'ITEM_STATE'] })]
            ]
        }],
    },
    {
        id: 86,
        name: 'Lesser Fire Wound',
        noted: false,
        value: 14,
        stackable: true,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('6', 19, 'CRAFT'),
            ItemDetail.levelSkillDetail(56, 17, 'INCINERATE'),
        ]),
        projectileID: 9,
        spriteIndex: 87,
        combatStyle: Combat.CombatStyle.MAGIC,
        attackRange: 5,
        attackCooldown: 5,
        equipmentStats: [0, 0, 0, 0, 0, 0, 0, 0, 0],
        spellID: 3,
        essenceValue: EssenceValue(56, 5, [ShardCatalog.AIR(90), ShardCatalog.EARTH(14), ShardCatalog.NATURE(1), ShardCatalog.FIRE(95), ShardCatalog.FORCE(10)]),
        model: {
            RIGHT_TOOL: {
                id: 'RIGHT_TOOL',
                asset: 'heldParts',
                sprite: 'strike',
                parent: 'RIGHT_FOREARM',
                spriteID: 4,
                anchor: { x: 0.95, y: 0.5 },
                position: { x: 0.75, y: 0.75 },
                rotation: 0,
                UIModel: null,
            },
        },
        actions: [{
            interfaceID: 5,
            id: 4,
            name: 'Equip',
            steps: [
                [buildStep(StepType.HAS_SKILL_LEVEL, { params: [6, 30] }),
                buildStep(StepType.PLAY_ANIMATION, { params: ['EQUIP_SPELL'] }),
                buildStep(StepType.GIVE_EQUIPMENT_ITEM, { params: [1, 'ITEM_ID', 'ITEM_STATE'] })]
            ]
        }],
    },
    {
        id: 87,
        name: 'Blue Silk',
        noted: false,
        notedID: 195,
        value: 12,
        stackable: false,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('1+', 15, 'CRAFT'),
            ItemDetail.levelSkillDetail(22, 17, 'INCINERATE'),
        ]),
        spriteIndex: 88,
        essenceValue: EssenceValue(22, 4, [ShardCatalog.AIR(50), ShardCatalog.EARTH(22), ShardCatalog.NATURE(3), ShardCatalog.BIND(50)]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 91,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[61, 62, 63, 155]] })]
            ],
        }],
    },
    {
        id: 88,
        name: 'Green Silk',
        noted: false,
        notedID: 196,
        value: 30,
        stackable: false,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('10+', 15, 'CRAFT'),
            ItemDetail.levelSkillDetail(28, 17, 'INCINERATE'),
        ]),
        spriteIndex: 89,
        essenceValue: EssenceValue(28, 6, [ShardCatalog.AIR(100), ShardCatalog.EARTH(33), ShardCatalog.NATURE(5), ShardCatalog.BIND(100)]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 91,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[64, 65, 66]] })]
            ],
        }],
    },
    {
        id: 89,
        name: 'Purple Silk',
        noted: false,
        notedID: 197,
        value: 84,
        stackable: false,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('20+', 15, 'CRAFT'),
            ItemDetail.levelSkillDetail(34, 17, 'INCINERATE'),
        ]),
        spriteIndex: 90,
        essenceValue: EssenceValue(34, 8, [ShardCatalog.AIR(150), ShardCatalog.EARTH(44), ShardCatalog.NATURE(7), ShardCatalog.BIND(150)]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 91,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[67, 68, 69]] })]
            ],
        }],
    },
    {
        id: 90,
        name: 'Burgundy Silk',
        noted: false,
        notedID: 198,
        value: 142,
        stackable: false,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('30+', 15, 'CRAFT'),
            ItemDetail.levelSkillDetail(40, 17, 'INCINERATE'),
        ]),
        spriteIndex: 91,
        essenceValue: EssenceValue(40, 10, [ShardCatalog.AIR(200), ShardCatalog.EARTH(55), ShardCatalog.NATURE(9), ShardCatalog.BIND(200)]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 91,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[70, 71, 72]] })]
            ],
        }],
    },
    {
        id: 91,
        name: 'Needle',
        noted: false,
        value: 1,
        stackable: true,
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(6, 17, 'INCINERATE'),
        ]),
        description: 'Use this to put thread through silk.',
        essenceValue: EssenceValue(6, 1, [ShardCatalog.SHARP(2), ShardCatalog.METAL(1)]),
        spriteIndex: 92,
    },
    {
        id: 92,
        name: 'Thread',
        noted: false,
        value: 1,
        stackable: true,
        description: 'Useful for binding silk.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(3, 17, 'INCINERATE'),
        ]),
        spriteIndex: 93,
        essenceValue: EssenceValue(3, 1, [ShardCatalog.EARTH(2), ShardCatalog.AIR(2)]),
    },
    Get.Item.WizardHat(93, 199, 'Blue Wizard Hat', 1, 1, 94, 44, 1),
    Get.Item.WizardHat(94, 200, 'Green Wizard Hat', 2, 2, 95, 100, 10),
    Get.Item.WizardHat(95, 201, 'Purple Wizard Hat', 4, 4, 96, 296, 20),
    Get.Item.WizardHat(96, 202, 'Burgundy Wizard Hat', 3, 3, 97, 512, 30),
    Get.Item.RobeChest(97, 203, 'Blue Wizard Top', 98, 1, 84, [0, 0, 0, 0, 0, -2, 4, 4, 10], 1),
    Get.Item.RobeChest(98, 204, 'Green Wizard Top', 99, 2, 170, [0, 0, 0, 0, 0, -4, 8, 8, 20], 10),
    Get.Item.RobeChest(99, 205, 'Purple Wizard Top', 100, 4, 478, [0, 0, 0, 0, 0, -6, 12, 12, 30], 20),
    Get.Item.RobeChest(100, 206, 'Burgundy Wizard Top', 101, 3, 980, [0, 0, 0, 0, 0, -8, 16, 16, 40], 30),
    Get.Item.RobeLegs(101, 207, 'Blue Wizard Bottom', 102, 1, 60, [0, 0, 0, 0, 0, -1, 3, 3, 8], 1),
    Get.Item.RobeLegs(102, 208, 'Green Wizard Bottom', 103, 2, 132, [0, 0, 0, 0, 0, -2, 6, 6, 16], 10),
    Get.Item.RobeLegs(103, 209, 'Purple Wizard Bottom', 104, 4, 369, [0, 0, 0, 0, 0, -3, 9, 9, 24], 20),
    Get.Item.RobeLegs(104, 210, 'Burgundy Wizard Bottom', 105, 3, 776, [0, 0, 0, 0, 0, -4, 12, 12, 32], 30),
    Get.Item.ChainHelm(105, 211, 'Copper Chainhelm', 1, 54, 106, 11, 1, [0, 0, 1, 1, 1, 5, 0, 0, 0]),
    Get.Item.ChainHelm(106, 212, 'Iron Chainhelm', 2, 158, 107, 12, 10, [0, 0, 2, 2, 2, 10, 0, 0, 0]),
    Get.Item.ChainHelm(107, 213, 'Steel Chainhelm', 3, 332, 108, 13, 20, [0, 0, 3, 3, 3, 15, 0, 0, 0]),
    Get.Item.ChainHelm(108, 214, 'Nelenite Chainhelm', 4, 762, 109, 14, 30, [0, 0, 4, 4, 4, 20, 0, 0, 0]),
    Get.Item.Chainlegs(109, 215, 'Copper Chainlegs', 1, 68, 110, 11, 1, [0, 0, 2, 2, 2, 8, -2, -2, -1]),
    Get.Item.Chainlegs(110, 216, 'Iron Chainlegs', 2, 214, 111, 12, 10, [0, 0, 4, 4, 4, 16, -4, -4, -2]),
    Get.Item.Chainlegs(111, 217, 'Steel Chainlegs', 3, 442, 112, 13, 20, [0, 0, 6, 6, 6, 24, -6, -6, -3]),
    Get.Item.Chainlegs(112, 218, 'Nelenite Chainlegs', 4, 1020, 113, 14, 30, [0, 0, 8, 8, 8, 32, -8, -8, -4]),
    Get.Item.Chainbody(113, 219, 'Copper Chainbody', 1, 86, 114, 11, 1, [0, 0, 3, 3, 3, 10, -4, -4, -2]),
    Get.Item.Chainbody(114, 220, 'Iron Chainbody', 2, 268, 115, 12, 10, [0, 0, 6, 6, 6, 20, -8, -8, -4]),
    Get.Item.Chainbody(115, 221, 'Steel Chainbody', 3, 538, 116, 13, 20, [0, 0, 9, 9, 9, 30, -12, -12, -6]),
    Get.Item.Chainbody(116, 222, 'Nelenite Chainbody', 4, 1330, 117, 14, 30, [0, 0, 12, 12, 12, 40, -16, -16, -8]),
    {
        id: 117,
        name: 'Fishing Net',
        noted: false,
        notedID: 223,
        value: 2,
        stackable: false,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('1+', 12, 'USE'),
            ItemDetail.levelSkillDetail(2, 17, 'INCINERATE'),
        ]),
        spriteIndex: 118,
        toolPower: 2,
        toolLevel: 1,
        itemGroup: 3,
        essenceValue: EssenceValue(2, 2, [ShardCatalog.WATER(1), ShardCatalog.EARTH(1), ShardCatalog.BIND(20)]),
    },
    {
        id: 118,
        name: 'Saw',
        noted: false,
        notedID: 224,
        value: 2,
        stackable: false,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('1+', 18, 'USE'),
            ItemDetail.levelSkillDetail(5, 17, 'INCINERATE'),
        ]),
        spriteIndex: 119,
        essenceValue: EssenceValue(5, 3, [ShardCatalog.SHARP(1), ShardCatalog.EARTH(1), ShardCatalog.METAL(2)]),
        useActions: [
            Get.Action.BuildWithSaw(9, 5, [92, 96, 97, 101, 112, 187]), // Logs -> [lumber(1), mine(1), clay, fish, training(1), market stall]
            Get.Action.BuildWithSaw(10, 6, [93, 98, 113, 188, 282]), // Oak -> [lumber(2), mine(2), training(2), crabpot]
            Get.Action.BuildWithSaw(11, 7, [94, 99, 261, 114, 189]), // Ash -> [lumber(3), mine(3), mine(gold), training(3)]
            Get.Action.BuildWithSaw(12, 8, [95, 100, 115, 190]), // Fur -> [lumber(4), mine(4), training(4)]
            Get.Action.BuildWithSaw(13, 240, [92, 96, 97, 112]), // Construction Frame -> [lumber(1), mine(1), clay, training(1)]
            Get.Action.BuildWithSaw(14, 315, [146, 148, 152, 150, 191]), // King Maple -> [lumber(5), mine(5), fish(2), training(5)]
            Get.Action.BuildWithSaw(15, 317, [147, 149, 151, 192]), // Magic -> [lumber(6), mine(6), training(6)]
        ]
    },
    {
        id: 119,
        name: 'Burnt Shrimp',
        noted: false,
        notedID: 225,
        value: 0,
        itemCannotBeRolled: true,
        stackable: false,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(9, 17, 'INCINERATE'),
        ]),
        spriteIndex: 120,
        essenceValue: EssenceValue(9, 1, [ShardCatalog.POISON(2), ShardCatalog.EARTH(1)]),
    },
    {
        id: 120,
        name: 'Burnt Sardine',
        noted: false,
        notedID: 226,
        value: 0,
        itemCannotBeRolled: true,
        stackable: false,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(11, 17, 'INCINERATE'),
        ]),
        spriteIndex: 121,
        essenceValue: EssenceValue(11, 1, [ShardCatalog.POISON(4), ShardCatalog.EARTH(2)]),
    },
    {
        id: 121,
        name: 'Burnt Herring',
        noted: false,
        notedID: 227,
        value: 0,
        itemCannotBeRolled: true,
        stackable: false,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(13, 17, 'INCINERATE'),
        ]),
        spriteIndex: 122,
        essenceValue: EssenceValue(13, 1, [ShardCatalog.POISON(6), ShardCatalog.EARTH(2)]),
    },
    {
        id: 122,
        name: 'Burnt Mullet',
        noted: false,
        notedID: 228,
        value: 0,
        itemCannotBeRolled: true,
        stackable: false,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(15, 17, 'INCINERATE'),
        ]),
        spriteIndex: 123,
        essenceValue: EssenceValue(15, 2, [ShardCatalog.POISON(8), ShardCatalog.EARTH(3)]),
    },
    {
        id: 123,
        name: 'Knife',
        noted: false,
        notedID: 229,
        value: 3,
        stackable: false,
        description: 'A sharp tool for cutting logs.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('1+', 16, 'USE'),
            ItemDetail.levelSkillDetail(5, 17, 'INCINERATE'),
        ]),
        spriteIndex: 124,
        essenceValue: EssenceValue(5, 2, [ShardCatalog.SHARP(2), ShardCatalog.METAL(1)]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 5,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[0, 1]] })]
            ],
        }, {
            interfaceID: 5,
            id: 10,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 6,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[2, 3]] })]
            ],
        }, {
            interfaceID: 5,
            id: 11,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 7,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[4, 5]] })]
            ],
        }, {
            interfaceID: 5,
            id: 12,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 8,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[6, 7]] })]
            ],
        },
        {
            interfaceID: 5,
            id: 13,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 315,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[142, 143]] })]
            ],
        },
        {
            interfaceID: 5,
            id: 14,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 317,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[144, 145]] })]
            ],
        },
        {
            interfaceID: 5,
            id: 25,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 844,
            actionInterval: 2,
            steps: [
                [
                    buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [844, 1] }),
                    buildStep(StepType.ROLL_SKILL_DROP_TABLE, { params: [1, 13, [[850, 3, 8, 1, 1]]] }),
                    buildStep(StepType.GIVE_XP, { params: [13, 15] }),
                ]
            ],
        },],
    },
    {
        id: 124,
        name: 'Flax',
        noted: false,
        notedID: 230,
        value: 2,
        stackable: false,
        description: 'A plant good for making bowstrings with.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('1+', 15, 'CRAFT'),
            ItemDetail.levelSkillDetail(4, 17, 'INCINERATE'),
        ]),
        spriteIndex: 125,
        essenceValue: EssenceValue(4, 2, [ShardCatalog.NATURE(2), ShardCatalog.EARTH(2)]),
    },
    {
        id: 125,
        name: 'Unfired Pot',
        noted: false,
        value: 3,
        stackable: true,
        description: 'A soft clay pot, should be fired first.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('10', 15, 'CRAFT'),
            ItemDetail.levelSkillDetail(11, 17, 'INCINERATE'),
        ]),
        spriteIndex: 126,
        essenceValue: EssenceValue(11, 3, [ShardCatalog.EARTH(8), ShardCatalog.NATURE(1), ShardCatalog.WATER(2)]),
    },
    {
        id: 126,
        name: 'Void Essence',
        noted: false,
        value: 34,
        stackable: true,
        description: 'An essence of void, useful for moving things.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('5+', 15, 'CRAFT'),
            ItemDetail.levelSkillDetail(50, 17, 'INCINERATE'),
        ]),
        spriteIndex: 127,
        essenceValue: EssenceValue(50, 0, [ShardCatalog.VOID(90)]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 82,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[79, 80, 81, 82, 194, 195, 239, 240]] })]
            ],
        }],
    },
    {
        id: 127,
        name: 'Fiewon Teleport',
        noted: false,
        value: 45,
        stackable: true,
        description: 'A teleport spell to the starter town, Fiewon.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('1', 22, 'USE'), //level 10, not 1
            ItemDetail.levelSkillDetail(56, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(56, 18, [ShardCatalog.VOID(80), ShardCatalog.AIR(270),]),
        spriteIndex: 128,
        actions: [{
            interfaceID: 5,
            id: 17,
            steps: [
                [buildStep(StepType.SEND_CLIENT_MESSAGE, { params: ['You break the teleport spell around you...'] }),
                buildStep(StepType.HAS_INVENTORY_ITEM, { params: [127, 1] }),
                buildStep(StepType.HAS_SKILL_LEVEL, { params: [22, 1] }), //level 10, not 1
                buildStep(StepType.IS_TIMER_EXPIRED, { params: [11] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [127, 1] }),
                buildStep(StepType.GIVE_XP, { params: [22, 25] }),
                buildStep(StepType.TELEPORT, { params: [0, 30, 34, 33, 37, 3] })]
            ],
        }],
    },
    {
        id: 128,
        name: 'Salmo Teleport',
        noted: false,
        value: 48,
        stackable: true,
        description: 'A teleport spell to Salmo.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('14', 22, 'USE'),
            ItemDetail.levelSkillDetail(59, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(59, 18, [ShardCatalog.VOID(80), ShardCatalog.AIR(180), ShardCatalog.WATER(80)]),
        spriteIndex: 129,
        actions: [{
            interfaceID: 5,
            id: 17,
            steps: [
                [buildStep(StepType.SEND_CLIENT_MESSAGE, { params: ['You break the teleport spell around you...'] }),
                buildStep(StepType.HAS_INVENTORY_ITEM, { params: [128, 1] }),
                buildStep(StepType.HAS_SKILL_LEVEL, { params: [22, 14] }),
                buildStep(StepType.IS_TIMER_EXPIRED, { params: [11] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [128, 1] }),
                buildStep(StepType.GIVE_XP, { params: [22, 35] }),
                buildStep(StepType.TELEPORT, { params: [0, 154, 3, 159, 5, 3] })]
            ],
        }],
    },
    {
        id: 129,
        name: 'Volcano Teleport',
        noted: false,
        value: 58,
        stackable: true,
        description: 'A teleport spell to the volcano.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('18', 22, 'USE'),
            ItemDetail.levelSkillDetail(62, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(62, 18, [ShardCatalog.VOID(80), ShardCatalog.AIR(180), ShardCatalog.EARTH(80)]),
        spriteIndex: 130,
        actions: [{
            interfaceID: 5,
            id: 17,
            steps: [
                [buildStep(StepType.SEND_CLIENT_MESSAGE, { params: ['You break the teleport spell around you...'] }),
                buildStep(StepType.HAS_INVENTORY_ITEM, { params: [129, 1] }),
                buildStep(StepType.HAS_SKILL_LEVEL, { params: [22, 18] }),
                buildStep(StepType.IS_TIMER_EXPIRED, { params: [11] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [129, 1] }),
                buildStep(StepType.GIVE_XP, { params: [22, 45] }),
                buildStep(StepType.TELEPORT, { params: [0, 166, 71, 170, 74, 3] })]
            ],
        }],
    },
    {
        id: 130,
        name: 'Island Teleport',
        noted: false,
        value: 112,
        stackable: true,
        description: 'A teleport spell to the offshore island.',
        essenceValue: EssenceValue(65, 18, [ShardCatalog.VOID(80), ShardCatalog.AIR(180), ShardCatalog.FIRE(80)]),
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('22', 22, 'USE'),
            ItemDetail.levelSkillDetail(65, 17, 'INCINERATE'),
        ]),
        spriteIndex: 131,
        actions: [{
            interfaceID: 5,
            id: 17,
            steps: [
                [buildStep(StepType.SEND_CLIENT_MESSAGE, { params: ['You break the teleport spell around you...'] }),
                buildStep(StepType.HAS_INVENTORY_ITEM, { params: [130, 1] }),
                buildStep(StepType.HAS_SKILL_LEVEL, { params: [22, 22] }),
                buildStep(StepType.IS_TIMER_EXPIRED, { params: [11] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [130, 1] }),
                buildStep(StepType.GIVE_XP, { params: [22, 55] }),
                buildStep(StepType.TELEPORT, { params: [0, 11, 92, 13, 94, 3] })]
            ],
        }],
    },
    Get.Item.Note(131, 1, 'Copper Axe', 19, 2),
    Get.Item.Note(132, 2, 'Iron Axe', 54, 3),
    Get.Item.Note(133, 3, 'Steel Axe', 112, 4),
    Get.Item.Note(134, 4, 'Nelenite Axe', 260, 5),
    Get.Item.Note(135, 5, 'Logs', 2, 6),
    Get.Item.Note(136, 6, 'Oak Logs', 6, 7),
    Get.Item.Note(137, 7, 'Ash Logs', 12, 8),
    Get.Item.Note(138, 8, 'Fur Logs', 26, 9),
    Get.Item.Note(139, 9, 'Copper Pickaxe', 34, 10),
    Get.Item.Note(140, 10, 'Iron Pickaxe', 106, 11),
    Get.Item.Note(141, 11, 'Steel Pickaxe', 218, 12),
    Get.Item.Note(142, 12, 'Nelenite Pickaxe', 514, 13),
    Get.Item.Note(143, 13, 'Copper Dagger', 19, 14),
    Get.Item.Note(144, 14, 'Iron Dagger', 54, 15),
    Get.Item.Note(145, 15, 'Steel Dagger', 112, 16),
    Get.Item.Note(146, 16, 'Nelenite Dagger', 260, 17),
    Get.Item.Note(147, 17, 'Copper Sword', 34, 18),
    Get.Item.Note(148, 18, 'Iron Sword', 106, 19),
    Get.Item.Note(149, 19, 'Steel Sword', 218, 20),
    Get.Item.Note(150, 20, 'Nelenite Sword', 514, 21),
    Get.Item.Note(151, 21, 'Copper Helmet', 34, 22),
    Get.Item.Note(152, 22, 'Iron Helmet', 106, 23),
    Get.Item.Note(153, 23, 'Steel Helmet', 218, 24),
    Get.Item.Note(154, 24, 'Nelenite Helmet', 514, 25),
    Get.Item.Note(155, 25, 'Copper Full Helm', 54, 26),
    Get.Item.Note(156, 26, 'Iron Full Helm', 158, 27),
    Get.Item.Note(157, 27, 'Steel Full Helm', 332, 28),
    Get.Item.Note(158, 28, 'Nelenite Full Helm', 762, 29),
    Get.Item.Note(159, 29, 'Copper Platelegs', 68, 30),
    Get.Item.Note(160, 30, 'Iron Platelegs', 214, 31),
    Get.Item.Note(161, 31, 'Steel Platelegs', 442, 32),
    Get.Item.Note(162, 32, 'Nelenite Platelegs', 1020, 33),
    Get.Item.Note(163, 33, 'Unstrung Bow', 4, 34),
    Get.Item.Note(164, 34, 'Unstrung Oak Bow', 8, 35),
    Get.Item.Note(165, 35, 'Unstrung Ash Bow', 18, 36),
    Get.Item.Note(166, 36, 'Unstrung Fur Bow', 34, 37),
    Get.Item.Note(167, 37, 'Bow', 28, 38),
    Get.Item.Note(168, 38, 'Oak Bow', 39, 39),
    Get.Item.Note(169, 39, 'Ash Bow', 56, 40),
    Get.Item.Note(170, 40, 'Fur Bow', 85, 41),
    Get.Item.Note(171, 41, 'Bowstring', 8, 42),
    Get.Item.Note(172, 42, 'Copper Platebody', 86, 43),
    Get.Item.Note(173, 43, 'Iron Platebody', 268, 44),
    Get.Item.Note(174, 44, 'Steel Platebody', 538, 45),
    Get.Item.Note(175, 45, 'Nelenite Platebody', 1330, 46),
    Get.Item.Note(176, 47, 'Raw Shrimp', 2, 48),
    Get.Item.Note(177, 48, 'Raw Sardine', 5, 49),
    Get.Item.Note(178, 49, 'Raw Herring', 12, 50),
    Get.Item.Note(179, 50, 'Raw Mullet', 20, 51),
    Get.Item.Note(180, 51, 'Shrimp', 4, 52),
    Get.Item.Note(181, 52, 'Sardine', 7, 53),
    Get.Item.Note(182, 53, 'Herring', 16, 54),
    Get.Item.Note(183, 54, 'Mullet', 25, 55),
    Get.Item.Note(184, 55, 'Copper Ore', 5, 56),
    Get.Item.Note(185, 56, 'Iron Ore', 16, 57),
    Get.Item.Note(186, 57, 'Coal', 32, 58),
    Get.Item.Note(187, 58, 'Nelenite Ore', 60, 59),
    Get.Item.Note(188, 59, 'Copper Bar', 14, 60),
    Get.Item.Note(189, 60, 'Iron Bar', 48, 61),
    Get.Item.Note(190, 61, 'Steel Bar', 100, 62),
    Get.Item.Note(191, 62, 'Nelenite Bar', 240, 63),
    Get.Item.Note(192, 63, 'Hammer', 4, 64),
    Get.Item.Note(193, 75, 'Clay', 2, 76),
    Get.Item.Note(194, 77, 'Clay Pot', 5, 78),
    Get.Item.Note(195, 87, 'Blue Silk', 12, 88),
    Get.Item.Note(196, 88, 'Green Silk', 30, 89),
    Get.Item.Note(197, 89, 'Purple Silk', 84, 90),
    Get.Item.Note(198, 90, 'Burgundy Silk', 142, 91),
    Get.Item.Note(199, 93, 'Blue Wizard Hat', 44, 94),
    Get.Item.Note(200, 94, 'Green Wizard Hat', 100, 95),
    Get.Item.Note(201, 95, 'Purple Wizard Hat', 296, 96),
    Get.Item.Note(202, 96, 'Burgundy Wizard Hat', 512, 97),
    Get.Item.Note(203, 97, 'Blue Wizard Top', 84, 98),
    Get.Item.Note(204, 98, 'Green Wizard Top', 170, 99),
    Get.Item.Note(205, 99, 'Purple Wizard Top', 478, 100),
    Get.Item.Note(206, 100, 'Burgundy Wizard Top', 980, 101),
    Get.Item.Note(207, 101, 'Blue Wizard Bottom', 60, 102),
    Get.Item.Note(208, 102, 'Green Wizard Bottom', 132, 103),
    Get.Item.Note(209, 103, 'Purple Wizard Bottom', 269, 104),
    Get.Item.Note(210, 104, 'Burgundy Wizard Bottom', 776, 105),
    Get.Item.Note(211, 105, 'Copper Chainhelm', 54, 106),
    Get.Item.Note(212, 106, 'Iron Chainhelm', 158, 107),
    Get.Item.Note(213, 107, 'Steel Chainhelm', 332, 108),
    Get.Item.Note(214, 108, 'Nelenite Chainhelm', 762, 109),
    Get.Item.Note(215, 109, 'Copper Chainlegs', 68, 110),
    Get.Item.Note(216, 110, 'Iron Chainlegs', 214, 111),
    Get.Item.Note(217, 111, 'Steel Chainlegs', 442, 112),
    Get.Item.Note(218, 112, 'Nelenite Chainlegs', 1020, 113),
    Get.Item.Note(219, 113, 'Copper Chainbody', 86, 114),
    Get.Item.Note(220, 114, 'Iron Chainbody', 268, 115),
    Get.Item.Note(221, 115, 'Steel Chainbody', 538, 116),
    Get.Item.Note(222, 116, 'Nelenite Chainbody', 1330, 117),
    Get.Item.Note(223, 117, 'Fishing Net', 2, 118),
    Get.Item.Note(224, 118, 'Saw', 2, 119),
    Get.Item.Note(225, 119, 'Burnt Shrimp', 0, 120),
    Get.Item.Note(226, 120, 'Burnt Sardine', 0, 121),
    Get.Item.Note(227, 121, 'Burnt Herring', 0, 122),
    Get.Item.Note(228, 122, 'Burnt Mullet', 0, 123),
    Get.Item.Note(229, 123, 'Knife', 3, 124),
    Get.Item.Note(230, 124, 'Flax', 2, 125),
    Get.Item.Note(231, 125, 'Unfired Pot', 3, 126),
    {
        id: 232,
        name: 'Raw Boxfish',
        noted: false,
        notedID: 233,
        value: 40,
        stackable: false,
        description: 'A raw, square fish.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(40, 12, 'GATHER'),
            ItemDetail.levelSkillDetail(40, 13, 'CRAFT'),
            ItemDetail.levelSkillDetail(20, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(20, 6, [ShardCatalog.WATER(125), ShardCatalog.NATURE(7)]),
        spriteIndex: 132,
    },
    Get.Item.Note(233, 232, 'Raw Boxfish', 40, 132),
    {
        id: 234,
        name: 'Boxfish',
        noted: false,
        notedID: 235,
        value: 60,
        stackable: false,
        description: 'A cooked, square fish. Heals 8 hitpoints.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('40', 13, 'CRAFT'),
            ItemDetail.levelSkillDetail(28, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(28, 6, [ShardCatalog.WATER(5), ShardCatalog.NATURE(50), ShardCatalog.FIRE(5)]),
        spriteIndex: 133,
        actions: [{
            actionInterval: 0,
            interfaceID: 5,
            id: 18,
            name: 'Eat',
            steps: [
                [buildStep(StepType.HAS_INVENTORY_ITEM, { params: [234, 1] }),
                buildStep(StepType.IS_TIMER_EXPIRED, { params: [8] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [234, 1] }),
                buildStep(StepType.EAT_FOOD, { params: [8] })]
            ],
        }],
    },
    Get.Item.Note(235, 234, 'Boxfish', 60, 133),
    {
        id: 236,
        name: 'Burnt Boxfish',
        noted: false,
        notedID: 237,
        value: 0,
        itemCannotBeRolled: true,
        stackable: false,
        description: 'A burnt, square fish.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(17, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(17, 3, [ShardCatalog.POISON(20), ShardCatalog.EARTH(4)]),
        spriteIndex: 134,
    },
    Get.Item.Note(237, 236, 'Burnt Boxfish', 0, 134),
    {
        id: 238,
        name: '14-Day Building Permit',
        purchaseKey: 'PERMIT_14DAY',
        noted: false,
        value: 500,
        stackable: true,
        description: 'Signing this allows you to build structures.',
        spriteIndex: 135,
        actions: [{
            interfaceID: 5,
            id: 19,
            name: 'Sign',
            steps: [
                [buildStep(StepType.HAS_INVENTORY_ITEM, { params: [238, 1] }),
                buildStep(StepType.SIGN_PERMIT, { params: [14] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [238, 1] })]
            ]
        }],
    },
    {
        id: 239,
        name: '30-Day Building Permit',
        purchaseKey: 'PERMIT_30DAY',
        noted: false,
        value: 1000,
        stackable: true,
        description: 'Signing this allows you to build structures.',
        spriteIndex: 136,
        actions: [{
            interfaceID: 5,
            id: 19,
            name: 'Sign',
            steps: [
                [buildStep(StepType.HAS_INVENTORY_ITEM, { params: [239, 1] }),
                buildStep(StepType.SIGN_PERMIT, { params: [30] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [239, 1] })]
            ]
        }],
    },
    {
        id: 240,
        name: 'Construction Frame',
        noted: false,
        untradeable: true,
        value: 0,
        itemCannotBeRolled: true,
        stackable: false,
        description: 'You can use this to build level 1 construction buildings.',
        spriteIndex: 140,
    },
    {
        id: 241,
        name: 'Raw Rockfish',
        noted: false,
        notedID: 242,
        value: 50,
        stackable: false,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(50, 12, 'GATHER'),
            ItemDetail.levelSkillDetail(50, 13, 'CRAFT'),
            ItemDetail.levelSkillDetail(24, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(24, 7, [ShardCatalog.WATER(150), ShardCatalog.NATURE(9)]),
        spriteIndex: 137,
    },
    Get.Item.Note(242, 241, 'Raw Rockfish', 50, 137),
    {
        id: 243,
        name: 'Rockfish',
        noted: false,
        notedID: 244,
        value: 70,
        stackable: false,
        description: 'A cooked, rocky fish. Heals 10 hitpoints.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(50, 12, 'GATHER'),
            ItemDetail.levelSkillDetail(50, 13, 'CRAFT'),
            ItemDetail.levelSkillDetail(32, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(32, 7, [ShardCatalog.WATER(6), ShardCatalog.NATURE(6), ShardCatalog.FIRE(60), ShardCatalog.SHARP(3), ShardCatalog.FORCE(1)]),
        spriteIndex: 138,
        actions: [{
            actionInterval: 0,
            interfaceID: 5,
            id: 18,
            name: 'Eat',
            steps: [
                [buildStep(StepType.HAS_INVENTORY_ITEM, { params: [243, 1] }),
                buildStep(StepType.IS_TIMER_EXPIRED, { params: [8] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [243, 1] }),
                buildStep(StepType.EAT_FOOD, { params: [10] })]
            ],
        }],
    },
    Get.Item.Note(244, 243, 'Rockfish', 70, 138),
    {
        id: 245,
        name: 'Burnt Rockfish',
        noted: false,
        notedID: 246,
        value: 0,
        itemCannotBeRolled: true,
        stackable: false,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(18, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(18, 2, [ShardCatalog.POISON(10), ShardCatalog.EARTH(4)]),
        spriteIndex: 139,
    },
    Get.Item.Note(246, 245, 'Burnt Rockfish', 0, 139),
    {
        id: 247,
        name: 'Raw Starslug',
        noted: false,
        notedID: 248,
        value: 60,
        stackable: false,
        description: 'A raw slug from the depths of the ocean.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(60, 12, 'GATHER'),
            ItemDetail.levelSkillDetail(60, 13, 'CRAFT'),
            ItemDetail.levelSkillDetail(30, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(30, 6, [ShardCatalog.WATER(175), ShardCatalog.NATURE(11), ShardCatalog.BIND(2)]),
        spriteIndex: 141,
    },
    Get.Item.Note(248, 247, 'Raw Starslug', 60, 141),
    {
        id: 249,
        name: 'Starslug',
        noted: false,
        notedID: 250,
        value: 80,
        stackable: false,
        description: 'A cooked, rocky fish. Heals 12 hitpoints.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(60, 12, 'GATHER'),
            ItemDetail.levelSkillDetail(60, 13, 'CRAFT'),
            ItemDetail.levelSkillDetail(35, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(35, 6, [ShardCatalog.WATER(8), ShardCatalog.NATURE(6), ShardCatalog.FIRE(80), ShardCatalog.BIND(5)]),
        spriteIndex: 142,
        actions: [{
            actionInterval: 0,
            interfaceID: 5,
            id: 18,
            name: 'Eat',
            steps: [
                [buildStep(StepType.HAS_INVENTORY_ITEM, { params: [249, 1] }),
                buildStep(StepType.IS_TIMER_EXPIRED, { params: [8] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [249, 1] }),
                buildStep(StepType.EAT_FOOD, { params: [12] })]
            ],
        }],
    },
    Get.Item.Note(250, 249, 'Starslug', 80, 142),
    {
        id: 251,
        name: 'Burnt Starslug',
        noted: false,
        notedID: 252,
        value: 0,
        itemCannotBeRolled: true,
        stackable: false,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(22, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(22, 3, [ShardCatalog.POISON(20), ShardCatalog.EARTH(5)]),
        spriteIndex: 143,
    },
    Get.Item.Note(252, 251, 'Burnt Starslug', 0, 143),
    //Gothite
    Get.Item.Ore(253, 254, 'Gothite Ore', 70, 144, 5),
    Get.Item.Note(254, 253, 'Gothite Ore', 70, 144),
    Get.Item.Bar(255, 256, 'Gothite Bar', 400, 145, 5),
    Get.Item.Note(256, 255, 'Gothite Bar', 400, 145),
    Get.Item.Helmet(257, 258, 'Gothite Helmet', 5, 1028, 146, 20, 40, [0, 0, 20, 0, 0, 5, -10, -10, -10]),
    Get.Item.Note(258, 257, 'Gothite Helmet', 1028, 146),
    Get.Item.FullHelm(259, 260, 'Gothite Full Helm', 5, 1512, 147, 20, 40, [0, 0, 30, 0, 0, 10, -10, -10, -15]),
    Get.Item.Note(260, 259, 'Gothite Full Helm', 1512, 147),
    Get.Item.Platelegs(261, 262, 'Gothite Platelegs', 5, 2048, 148, 20, 40, [0, 5, 50, 0, 0, 25, -25, -25, -40]),
    Get.Item.Note(262, 261, 'Gothite Platelegs', 2048, 148),
    Get.Item.Platebody(263, 264, 'Gothite Platebody', 5, 2612, 149, 20, 40, [0, 5, 70, 0, 0, 35, -35, -35, -50]),
    Get.Item.Note(264, 263, 'Gothite Platebody', 2612, 149),
    Get.Item.ChainHelm(265, 266, 'Gothite Chainhelm', 5, 1502, 150, 24, 40, [0, 0, 5, 5, 5, 25, 0, 0, 0]),
    Get.Item.Note(266, 265, 'Gothite Chainhelm', 1502, 150),
    Get.Item.Chainlegs(267, 268, 'Gothite Chainlegs', 5, 2040, 151, 24, 40, [0, 0, 10, 10, 10, 40, -10, -10, -5]),
    Get.Item.Note(268, 267, 'Gothite Chainlegs', 2040, 151),
    Get.Item.Chainbody(269, 270, 'Gothite Chainbody', 5, 2660, 152, 24, 40, [0, 0, 15, 15, 15, 50, -20, -20, -10]),
    Get.Item.Note(270, 269, 'Gothite Chainbody', 2660, 152),
    Get.Item.Dagger(271, 272, 'Gothite Dagger', 5, 550, 153, 22, 40, [36, 10, 0, 0, 0, 0, 0, 0, 0]),
    Get.Item.Note(272, 271, 'Gothite Dagger', 550, 153),
    Get.Item.Sword(273, 274, 'Gothite Sword', 5, 1010, 154, 22, 40, [25, 33, 5, 0, 0, 0, 0, 0, 0]),
    Get.Item.Note(274, 273, 'Gothite Sword', 1010, 154),
    Get.Item.Arrowheads(275, 276, 'Gothite Arrowheads', 13, 155, 25, 40, 5),
    Get.Item.Arrows(276, 'Gothite Arrows', 19, 156, 40, [0, 0, 0, 18, 18, 0, 0, 0, 0], 4),
    Get.Item.Axe(277, 278, 'Gothite Axe', 350, 157, 20, 40, 22, 40, [10, 18, 0, 0, 0, 0, 0, 0, -5], 5),
    Get.Item.Note(278, 277, 'Gothite Axe', 350, 157),
    Get.Item.Pickaxe(279, 280, 'Gothite Pickaxe', 1005, 158, 18, 40, 22, 40, [5, 25, 0, 0, 0, 0, 0, 0, -5], 5),
    Get.Item.Note(280, 279, 'Gothite Pickaxe', 1005, 158),
    // Osmium
    Get.Item.Ore(281, 282, 'Osmium Ore', 80, 159, 6),
    Get.Item.Note(282, 281, 'Osmium Ore', 80, 159),
    Get.Item.Bar(283, 284, 'Osmium Bar', 650, 160, 6),
    Get.Item.Note(284, 283, 'Osmium Bar', 650, 160),
    Get.Item.Helmet(285, 286, 'Osmium Helmet', 6, 1800, 161, 21, 50, [0, 0, 24, 0, 0, 6, -12, -12, -12]),
    Get.Item.Note(286, 285, 'Osmium Helmet', 1800, 161),
    Get.Item.FullHelm(287, 288, 'Osmium Full Helm', 6, 2712, 162, 21, 50, [0, 0, 36, 0, 0, 12, -12, -12, -18]),
    Get.Item.Note(288, 287, 'Osmium Full Helm', 2712, 162),
    Get.Item.Platelegs(289, 290, 'Osmium Platelegs', 6, 3625, 163, 21, 50, [0, 6, 60, 0, 0, 30, -30, -30, -48]),
    Get.Item.Note(290, 289, 'Osmium Platelegs', 3625, 163),
    Get.Item.Platebody(291, 292, 'Osmium Platebody', 6, 4020, 164, 21, 50, [0, 6, 84, 0, 0, 42, -42, -42, -60]),
    Get.Item.Note(292, 291, 'Osmium Platebody', 4020, 164),
    Get.Item.ChainHelm(293, 294, 'Osmium Chainhelm', 6, 2620, 165, 25, 50, [0, 0, 6, 6, 6, 30, 0, 0, 0]),
    Get.Item.Note(294, 293, 'Osmium Chainhelm', 2620, 165),
    Get.Item.Chainlegs(295, 296, 'Osmium Chainlegs', 6, 3550, 166, 25, 50, [0, 0, 12, 12, 12, 48, -12, -12, -5]),
    Get.Item.Note(296, 295, 'Osmium Chainlegs', 3550, 166),
    Get.Item.Chainbody(297, 298, 'Osmium Chainbody', 6, 4040, 167, 25, 50, [0, 0, 18, 18, 18, 60, -24, -24, -12]),
    Get.Item.Note(298, 297, 'Osmium Chainbody', 4040, 167),
    Get.Item.Dagger(299, 300, 'Osmium Dagger', 6, 850, 168, 23, 50, [43, 13, 0, 0, 0, 0, 0, 0, 0]),
    Get.Item.Note(300, 299, 'Osmium Dagger', 850, 168),
    Get.Item.Sword(301, 302, 'Osmium Sword', 6, 1810, 169, 23, 50, [30, 39, 6, 0, 0, 0, 0, 0, 0]),
    Get.Item.Note(302, 301, 'Osmium Sword', 1810, 169),
    Get.Item.Arrowheads(303, 304, 'Osmium Arrowheads', 18, 170, 30, 50, 6),
    Get.Item.Arrows(304, 'Osmium Arrows', 23, 171, 50, [0, 0, 0, 20, 20, 0, 0, 0, 0], 5),
    Get.Item.Axe(305, 306, 'Osmium Axe', 550, 172, 24, 50, 23, 50, [12, 20, 0, 0, 0, 0, 0, 0, -6], 6),
    Get.Item.Note(306, 305, 'Osmium Axe', 550, 172),
    Get.Item.Pickaxe(307, 308, 'Osmium Pickaxe', 1650, 173, 21, 50, 23, 50, [6, 30, 0, 0, 0, 0, 0, 0, -6], 6),
    Get.Item.Note(308, 307, 'Osmium Pickaxe', 1650, 173),
    // Holiday Hats
    Get.Item.BigHat(309, 310, 'Santa Hat', 174, 'hat_santa'),
    Get.Item.Note(310, 309, 'Santa Hat', 0, 174),
    Get.Item.BigHat(311, 312, 'Helper Hat', 175, 'hat_helper'),
    Get.Item.Note(312, 311, 'Helper Hat', 0, 175),
    Get.Item.BigHat(313, 314, 'Reindeer Hat', 176, 'hat_reinedeer'),
    Get.Item.Note(314, 313, 'Reindeer Hat', 0, 176),
    // Logs
    Get.Item.Logs(315, 316, 'King Maple', 40, 177, 40),
    Get.Item.Note(316, 315, 'King Maple Logs', 40, 177, 40),
    Get.Item.Logs(317, 318, 'Magic', 54, 178, 50),
    Get.Item.Note(318, 317, 'Magic Logs', 54, 178, 50),
    // Bows
    Get.Item.Bow(319, 320, 'King Maple Bow', 110, 179, [0, 0, 0, 20, 20, 0, 0, 0, 5], 5, 40, [68, 69, 70, 558, 71, 276, 304]),
    Get.Item.Note(320, 319, 'King Maple Bow', 110, 179),
    Get.Item.Bow(321, 322, 'Magic Bow', 140, 180, [0, 0, 0, 24, 24, 0, 0, 0, 6], 6, 50, [68, 69, 70, 558, 71, 276, 304]),
    Get.Item.Note(322, 321, 'Magic Bow', 140, 180),
    Get.Item.UnstrungBow(323, 324, 'King Maple', 60, 181, 40, 319, 125, 5),
    Get.Item.Note(324, 323, 'Unstrung King Maple Bow', 60, 181),
    Get.Item.UnstrungBow(325, 326, 'Magic', 72, 182, 50, 321, 150, 6),
    Get.Item.Note(326, 325, 'Unstrung Magic Bow', 72, 182),
    {
        id: 327,
        name: 'Tome of Collection',
        noted: false,
        value: 350,
        stackable: false,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(65, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(65, 70, [ShardCatalog.AIR(5000), ShardCatalog.SOUL(500), ShardCatalog.FIRE(100), ShardCatalog.NATURE(100), ShardCatalog.BIND(200)]),
        spriteIndex: 183,
        state: ItemStates.ITEM_CHARGE.build(0, 1000),
        useActions: [{
            interfaceID: 5,
            id: 11,
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 563,
            actionInterval: 0,
            name: 'Scramble',
            steps: [
                [buildStep(StepType.RANDOMIZE_ITEM_STATE_ITEMID, { params: ['SLOT_ID', 327] }),
                buildStep(StepType.USE_ITEM_CHARGES, { params: ['SLOT_ID_OTHER', 563, 1] })],
            ],
        }],
    },
    {
        id: 328,
        name: 'Money Bag',
        purchaseKey: 'NEW_MONEY_BAG',
        noted: false,
        value: 100,
        stackable: false,
        ignoreDrop: true, //does not drop on death
        description: 'A big ol\' bag of money. Increases favor multiplier for all players when worn.',
        spriteIndex: (item) => {
            let donateAmount = item.getStateValue('donateAmount');
            if (donateAmount < 5) {
                return 184;
            }
            if (donateAmount < 10) {
                return 185;
            }
            if (donateAmount < 20) {
                return 186;
            }
            if (donateAmount < 50) {
                return 187;
            }
            if (donateAmount < 100) {
                return 188;
            }
            if (donateAmount < 250) {
                return 189;
            }
            if (donateAmount < 500) {
                return 190;
            }
            if (donateAmount < 1000) {
                return 191;
            }
            if (donateAmount < 2500) {
                return 192;
            }
            return 193;
        },
        equipmentStats: [0, 0, 0, 0, 0, 0, 0, 0, 0],
        model: {
            LEFT_TOOL: {
                id: 'LEFT_TOOL',
                asset: 'heldParts',
                sprite: 'moneyBag',
                parent: 'LEFT_FOREARM',
                spriteID: 0,
                anchor: { x: 0.5, y: 0.3 },
                position: { x: 0.5, y: 1.2 },
                rotation: -20 * Math.PI / 180,
                UIModel: null,
            },
        },
        state: ItemStates.DONATE_AMOUNT.build(2),
        actions: [{
            interfaceID: 5,
            id: 5,
            name: 'Equip',
            steps: [
                [buildStep(StepType.PLAY_ANIMATION, { params: ['EQUIP_MONEYBAG'] }),
                buildStep(StepType.GIVE_EQUIPMENT_ITEM, { params: [2, 'ITEM_ID', 'ITEM_STATE'] })]
            ]
        }],
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 328,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[153, 88]] })]
            ],
        }],
    },
    {
        id: 329,
        name: 'Item Bag',
        noted: false,
        value: 150,
        stackable: false,
        description: 'A bag to store unstackable items in.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(38, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(38, 70, [ShardCatalog.AIR(600), ShardCatalog.EARTH(600), ShardCatalog.SOUL(20), ShardCatalog.NATURE(500), ShardCatalog.BIND(20)]),
        spriteIndex: 194,
        state: ItemStates.STORAGE_BAG.build(-1, 0, 1),
        actions: [{
            interfaceID: 5,
            id: 20,
            name: 'Withdraw',
        }, {
            interfaceID: 5,
            id: 21,
            name: 'Deposit',
        }, {
            interfaceID: 5,
            id: 23,
            name: 'Repair',
        }, {
            interfaceID: 5,
            id: 24,
            name: 'Upgrade',
        }],
        useActions: [{
            interfaceID: 5,
            id: 22,
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: -1, //sorted on client
            actionInterval: -1,
            name: 'Bind',
            steps: [
                [buildStep(StepType.ASSERT_ITEM_STATE, {
                    params: ['SLOT_ID', 'ITEM_ID', 'itemID', 'LESS_EQUALS', -1],
                    stepResultFail: StepResult.NEXT_STEP_LIST
                }),
                buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[186]] })],
                [buildStep(StepType.DEPOSIT_BAG_ITEM, { params: [10000] })],
            ],
        }, {
            interfaceID: 5,
            id: 11,
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 563,
            actionInterval: 0,
            name: 'Scramble',
            steps: [
                [buildStep(StepType.RANDOMIZE_ITEM_STATE_ITEMID, { params: ['SLOT_ID', 329] }),
                buildStep(StepType.USE_ITEM_CHARGES, { params: ['SLOT_ID_OTHER', 563, 1] })],
            ],
        }],
    },
    {
        id: 330,
        name: 'Drawstring',
        noted: false,
        value: 120,
        stackable: true,
        description: 'A strong rope capeable of handling a lot.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(28, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(28, 8, [ShardCatalog.EARTH(30), ShardCatalog.NATURE(10), ShardCatalog.BIND(20)]),
        spriteIndex: 195,
    },
    Get.Item.ColoredShirt(331, 332, 'Shirt', 196, '0', SpriteColor.Red, 5),
    Get.Item.Note(332, 331, 'Shirt', 5, 196),
    Get.Item.ColoredShirt(333, 334, 'Shirt', 197, '0', SpriteColor.Orange, 5),
    Get.Item.Note(334, 333, 'Shirt', 5, 197),
    Get.Item.ColoredShirt(335, 336, 'Shirt', 198, '0', SpriteColor.Yellow, 5),
    Get.Item.Note(336, 335, 'Shirt', 5, 198),
    Get.Item.ColoredShirt(337, 338, 'Shirt', 199, '0', SpriteColor.Green, 5),
    Get.Item.Note(338, 337, 'Shirt', 5, 199),
    Get.Item.ColoredShirt(339, 340, 'Shirt', 200, '0', SpriteColor.Blue, 5),
    Get.Item.Note(340, 339, 'Shirt', 5, 200),
    Get.Item.ColoredShirt(341, 342, 'Shirt', 201, '0', SpriteColor.Purple, 5),
    Get.Item.Note(342, 341, 'Shirt', 5, 201),
    Get.Item.ColoredShirt(343, 344, 'Shirt', 202, '0', SpriteColor.DarkGray, 5),
    Get.Item.Note(344, 343, 'Shirt', 5, 202),
    Get.Item.ColoredShirt(345, 346, 'Shirt', 203, '0', SpriteColor.LightGray, 5),
    Get.Item.Note(346, 345, 'Shirt', 5, 203),
    Get.Item.ColoredShirt(347, 348, 'Shirt', 204, '0', SpriteColor.Black, 5),
    Get.Item.Note(348, 347, 'Shirt', 5, 204),
    Get.Item.ColoredShirt(349, 350, 'Shirt', 205, '2', SpriteColor.Red, 5),
    Get.Item.Note(350, 349, 'Shirt', 5, 205),
    Get.Item.ColoredShirt(351, 352, 'Shirt', 206, '2', SpriteColor.Orange, 5),
    Get.Item.Note(352, 351, 'Shirt', 5, 206),
    Get.Item.ColoredShirt(353, 354, 'Shirt', 207, '2', SpriteColor.Yellow, 5),
    Get.Item.Note(354, 353, 'Shirt', 5, 207),
    Get.Item.ColoredShirt(355, 356, 'Shirt', 208, '2', SpriteColor.Green, 5),
    Get.Item.Note(356, 355, 'Shirt', 5, 208),
    Get.Item.ColoredShirt(357, 358, 'Shirt', 209, '2', SpriteColor.Blue, 5),
    Get.Item.Note(358, 357, 'Shirt', 5, 209),
    Get.Item.ColoredShirt(359, 360, 'Shirt', 210, '2', SpriteColor.Purple, 5),
    Get.Item.Note(360, 359, 'Shirt', 5, 210),
    Get.Item.ColoredShirt(361, 362, 'Shirt', 211, '2', SpriteColor.DarkGray, 5),
    Get.Item.Note(362, 361, 'Shirt', 5, 211),
    Get.Item.ColoredShirt(363, 364, 'Shirt', 212, '2', SpriteColor.LightGray, 5),
    Get.Item.Note(364, 363, 'Shirt', 5, 212),
    Get.Item.ColoredShirt(365, 366, 'Shirt', 213, '2', SpriteColor.Black, 5),
    Get.Item.Note(366, 365, 'Shirt', 5, 213),
    Get.Item.ColoredShirt(367, 368, 'Shirt', 214, '3', SpriteColor.Red, 5),
    Get.Item.Note(368, 367, 'Shirt', 5, 214),
    Get.Item.ColoredShirt(369, 370, 'Shirt', 215, '3', SpriteColor.Orange, 5),
    Get.Item.Note(370, 369, 'Shirt', 5, 215),
    Get.Item.ColoredShirt(371, 372, 'Shirt', 216, '3', SpriteColor.Yellow, 5),
    Get.Item.Note(372, 371, 'Shirt', 5, 216),
    Get.Item.ColoredShirt(373, 374, 'Shirt', 217, '3', SpriteColor.Green, 5),
    Get.Item.Note(374, 373, 'Shirt', 5, 217),
    Get.Item.ColoredShirt(375, 376, 'Shirt', 218, '3', SpriteColor.Blue, 5),
    Get.Item.Note(376, 375, 'Shirt', 5, 218),
    Get.Item.ColoredShirt(377, 378, 'Shirt', 219, '3', SpriteColor.Purple, 5),
    Get.Item.Note(378, 377, 'Shirt', 5, 219),
    Get.Item.ColoredShirt(379, 380, 'Shirt', 220, '3', SpriteColor.DarkGray, 5),
    Get.Item.Note(380, 379, 'Shirt', 5, 220),
    Get.Item.ColoredShirt(381, 382, 'Shirt', 221, '3', SpriteColor.LightGray, 5),
    Get.Item.Note(382, 381, 'Shirt', 5, 221),
    Get.Item.ColoredShirt(383, 384, 'Shirt', 222, '3', SpriteColor.Black, 5),
    Get.Item.Note(384, 383, 'Shirt', 5, 222),
    Get.Item.ColoredShirt(385, 386, 'Shirt', 223, '4', SpriteColor.Red, 5),
    Get.Item.Note(386, 385, 'Shirt', 5, 223),
    Get.Item.ColoredShirt(387, 388, 'Shirt', 224, '4', SpriteColor.Orange, 5),
    Get.Item.Note(388, 387, 'Shirt', 5, 224),
    Get.Item.ColoredShirt(389, 390, 'Shirt', 225, '4', SpriteColor.Yellow, 5),
    Get.Item.Note(390, 389, 'Shirt', 5, 225),
    Get.Item.ColoredShirt(391, 392, 'Shirt', 226, '4', SpriteColor.Green, 5),
    Get.Item.Note(392, 391, 'Shirt', 5, 226),
    Get.Item.ColoredShirt(393, 394, 'Shirt', 227, '4', SpriteColor.Blue, 5),
    Get.Item.Note(394, 393, 'Shirt', 5, 227),
    Get.Item.ColoredShirt(395, 396, 'Shirt', 228, '4', SpriteColor.Purple, 5),
    Get.Item.Note(396, 395, 'Shirt', 5, 228),
    Get.Item.ColoredShirt(397, 398, 'Shirt', 229, '4', SpriteColor.DarkGray, 5),
    Get.Item.Note(398, 397, 'Shirt', 5, 229),
    Get.Item.ColoredShirt(399, 400, 'Shirt', 230, '4', SpriteColor.LightGray, 5),
    Get.Item.Note(400, 399, 'Shirt', 5, 230),
    Get.Item.ColoredShirt(401, 402, 'Shirt', 231, '4', SpriteColor.Black, 5),
    Get.Item.Note(402, 401, 'Shirt', 5, 231),
    Get.Item.ColoredShirt(403, 404, 'Shirt', 232, '5', SpriteColor.Red, 5),
    Get.Item.Note(404, 403, 'Shirt', 5, 232),
    Get.Item.ColoredShirt(405, 406, 'Shirt', 233, '5', SpriteColor.Orange, 5),
    Get.Item.Note(406, 405, 'Shirt', 5, 233),
    Get.Item.ColoredShirt(407, 408, 'Shirt', 234, '5', SpriteColor.Yellow, 5),
    Get.Item.Note(408, 407, 'Shirt', 5, 234),
    Get.Item.ColoredShirt(409, 410, 'Shirt', 235, '5', SpriteColor.Green, 5),
    Get.Item.Note(410, 409, 'Shirt', 5, 235),
    Get.Item.ColoredShirt(411, 412, 'Shirt', 236, '5', SpriteColor.Blue, 5),
    Get.Item.Note(412, 411, 'Shirt', 5, 236),
    Get.Item.ColoredShirt(413, 414, 'Shirt', 237, '5', SpriteColor.Purple, 5),
    Get.Item.Note(414, 413, 'Shirt', 5, 237),
    Get.Item.ColoredShirt(415, 416, 'Shirt', 238, '5', SpriteColor.DarkGray, 5),
    Get.Item.Note(416, 415, 'Shirt', 5, 238),
    Get.Item.ColoredShirt(417, 418, 'Shirt', 239, '5', SpriteColor.LightGray, 5),
    Get.Item.Note(418, 417, 'Shirt', 5, 239),
    Get.Item.ColoredShirt(419, 420, 'Shirt', 240, '5', SpriteColor.Black, 5),
    Get.Item.Note(420, 419, 'Shirt', 5, 240),
    Get.Item.ColoredShirt(421, 422, 'Shirt', 241, '6', SpriteColor.Red, 5),
    Get.Item.Note(422, 421, 'Shirt', 5, 241),
    Get.Item.ColoredShirt(423, 424, 'Shirt', 242, '6', SpriteColor.Orange, 5),
    Get.Item.Note(424, 423, 'Shirt', 5, 242),
    Get.Item.ColoredShirt(425, 426, 'Shirt', 243, '6', SpriteColor.Yellow, 5),
    Get.Item.Note(426, 425, 'Shirt', 5, 243),
    Get.Item.ColoredShirt(427, 428, 'Shirt', 244, '6', SpriteColor.Green, 5),
    Get.Item.Note(428, 427, 'Shirt', 5, 244),
    Get.Item.ColoredShirt(429, 430, 'Shirt', 245, '6', SpriteColor.Blue, 5),
    Get.Item.Note(430, 429, 'Shirt', 5, 245),
    Get.Item.ColoredShirt(431, 432, 'Shirt', 246, '6', SpriteColor.Purple, 5),
    Get.Item.Note(432, 431, 'Shirt', 5, 246),
    Get.Item.ColoredShirt(433, 434, 'Shirt', 247, '6', SpriteColor.DarkGray, 5),
    Get.Item.Note(434, 433, 'Shirt', 5, 247),
    Get.Item.ColoredShirt(435, 436, 'Shirt', 248, '6', SpriteColor.LightGray, 5),
    Get.Item.Note(436, 435, 'Shirt', 5, 248),
    Get.Item.ColoredShirt(437, 438, 'Shirt', 249, '6', SpriteColor.Black, 5),
    Get.Item.Note(438, 437, 'Shirt', 5, 249),
    Get.Item.ColoredShirt(439, 440, 'Shirt', 250, '7', SpriteColor.Red, 5),
    Get.Item.Note(440, 439, 'Shirt', 5, 250),
    Get.Item.ColoredShirt(441, 442, 'Shirt', 251, '7', SpriteColor.Orange, 5),
    Get.Item.Note(442, 441, 'Shirt', 5, 251),
    Get.Item.ColoredShirt(443, 444, 'Shirt', 252, '7', SpriteColor.Yellow, 5),
    Get.Item.Note(444, 443, 'Shirt', 5, 252),
    Get.Item.ColoredShirt(445, 446, 'Shirt', 253, '7', SpriteColor.Green, 5),
    Get.Item.Note(446, 445, 'Shirt', 5, 253),
    Get.Item.ColoredShirt(447, 448, 'Shirt', 254, '7', SpriteColor.Blue, 5),
    Get.Item.Note(448, 447, 'Shirt', 5, 254),
    Get.Item.ColoredShirt(449, 450, 'Shirt', 255, '7', SpriteColor.Purple, 5),
    Get.Item.Note(450, 449, 'Shirt', 5, 255),
    Get.Item.ColoredShirt(451, 452, 'Shirt', 256, '7', SpriteColor.DarkGray, 5),
    Get.Item.Note(452, 451, 'Shirt', 5, 256),
    Get.Item.ColoredShirt(453, 454, 'Shirt', 257, '7', SpriteColor.LightGray, 5),
    Get.Item.Note(454, 453, 'Shirt', 5, 257),
    Get.Item.ColoredShirt(455, 456, 'Shirt', 258, '7', SpriteColor.Black, 5),
    Get.Item.Note(456, 455, 'Shirt', 5, 258),
    Get.Item.ColoredShirt(457, 458, 'Shirt', 259, '8', SpriteColor.Red, 5, false),
    Get.Item.Note(458, 457, 'Shirt', 5, 259),
    Get.Item.ColoredShirt(459, 460, 'Shirt', 260, '8', SpriteColor.Orange, 5, false),
    Get.Item.Note(460, 459, 'Shirt', 5, 260),
    Get.Item.ColoredShirt(461, 462, 'Shirt', 261, '8', SpriteColor.Yellow, 5, false),
    Get.Item.Note(462, 461, 'Shirt', 5, 261),
    Get.Item.ColoredShirt(463, 464, 'Shirt', 262, '8', SpriteColor.Green, 5, false),
    Get.Item.Note(464, 463, 'Shirt', 5, 262),
    Get.Item.ColoredShirt(465, 466, 'Shirt', 263, '8', SpriteColor.Blue, 5, false),
    Get.Item.Note(466, 465, 'Shirt', 5, 263),
    Get.Item.ColoredShirt(467, 468, 'Shirt', 264, '8', SpriteColor.Purple, 5, false),
    Get.Item.Note(468, 467, 'Shirt', 5, 264),
    Get.Item.ColoredShirt(469, 470, 'Shirt', 265, '8', SpriteColor.DarkGray, 5, false),
    Get.Item.Note(470, 469, 'Shirt', 5, 265),
    Get.Item.ColoredShirt(471, 472, 'Shirt', 266, '8', SpriteColor.LightGray, 5, false),
    Get.Item.Note(472, 471, 'Shirt', 5, 266),
    Get.Item.ColoredShirt(473, 474, 'Shirt', 267, '8', SpriteColor.Black, 5, false),
    Get.Item.Note(474, 473, 'Shirt', 5, 267),
    Get.Item.ColoredPants(475, 476, 'Pants', 'pant', SpriteColor.Red, 268, 5),
    Get.Item.Note(476, 475, 'Pants', 5, 268),
    Get.Item.ColoredPants(477, 478, 'Pants', 'pant', SpriteColor.Orange, 269, 5),
    Get.Item.Note(478, 477, 'Pants', 5, 269),
    Get.Item.ColoredPants(479, 480, 'Pants', 'pant', SpriteColor.Yellow, 270, 5),
    Get.Item.Note(480, 479, 'Pants', 5, 270),
    Get.Item.ColoredPants(481, 482, 'Pants', 'pant', SpriteColor.Green, 271, 5),
    Get.Item.Note(482, 481, 'Pants', 5, 271),
    Get.Item.ColoredPants(483, 484, 'Pants', 'pant', SpriteColor.Blue, 272, 5),
    Get.Item.Note(484, 483, 'Pants', 5, 272),
    Get.Item.ColoredPants(485, 486, 'Pants', 'pant', SpriteColor.Purple, 273, 5),
    Get.Item.Note(486, 485, 'Pants', 5, 273),
    Get.Item.ColoredPants(487, 488, 'Pants', 'pant', SpriteColor.DarkGray, 274, 5),
    Get.Item.Note(488, 487, 'Pants', 5, 274),
    Get.Item.ColoredPants(489, 490, 'Pants', 'pant', SpriteColor.LightGray, 275, 5),
    Get.Item.Note(490, 489, 'Pants', 5, 275),
    Get.Item.ColoredPants(491, 492, 'Pants', 'pant', SpriteColor.Black, 276, 5),
    Get.Item.Note(492, 491, 'Pants', 5, 276),
    {
        id: 493,
        name: 'Metal Essence',
        noted: false,
        value: 26,
        stackable: true,
        description: 'An essence of metal.',
        spriteIndex: 277,
        essenceValue: EssenceValue(55, 0, [ShardCatalog.METAL(90)]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 82,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[228, 233, 238, 195, 240]] })]
            ],
        }],
    },
    {
        id: 494,
        name: 'Force Essence',
        noted: false,
        value: 26,
        stackable: true,
        description: 'An essence of force.',
        spriteIndex: 278,
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('1+', 19, 'USE'),
            ItemDetail.levelSkillDetail(46, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(50, 0, [ShardCatalog.FORCE(90)]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 82,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[75, 76, 77, 78, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238]] })]
            ],
        }],
    },
    {
        id: 495,
        name: 'Sharp Essence',
        noted: false,
        value: 26,
        stackable: true,
        description: 'An essence of sharpness.',
        spriteIndex: 279,
    },
    {
        id: 496,
        name: 'Poison Essence',
        noted: false,
        value: 26,
        stackable: true,
        description: 'An essence of poison.',
        spriteIndex: 280,
    },
    {
        id: 497,
        name: 'Bind Essence',
        noted: false,
        value: 26,
        stackable: true,
        description: 'An essence of binding.',
        spriteIndex: 281,
    },
    {
        id: 498,
        name: 'Soul Essence',
        noted: false,
        value: 26,
        stackable: true,
        description: 'An essence of soul.',
        spriteIndex: 282,
    },
    {
        id: 499,
        name: 'Nature Essence',
        noted: false,
        value: 26,
        stackable: true,
        description: 'An essence of nature.',
        spriteIndex: 283,
    },
    {
        id: 500,
        name: 'Air Shard',
        noted: false,
        value: 0,
        stackable: true,
        description: 'A shard of air essence.',
        spriteIndex: 284,
    },
    {
        id: 501,
        name: 'Water Shard',
        noted: false,
        value: 0,
        stackable: true,
        description: 'A shard of water essence.',
        spriteIndex: 285,
    },
    {
        id: 502,
        name: 'Earth Shard',
        noted: false,
        value: 0,
        stackable: true,
        description: 'A shard of earth essence.',
        spriteIndex: 286,
    },
    {
        id: 503,
        name: 'Fire Shard',
        noted: false,
        value: 0,
        stackable: true,
        description: 'A shard of fire essence.',
        spriteIndex: 287,
    },
    {
        id: 504,
        name: 'Void Shard',
        noted: false,
        value: 1,
        stackable: true,
        description: 'A shard of void essence.',
        spriteIndex: 288,
    },
    {
        id: 505,
        name: 'Metal Shard',
        noted: false,
        value: 0,
        stackable: true,
        description: 'A shard of metal essence.',
        spriteIndex: 289,
    },
    {
        id: 506,
        name: 'Force Shard',
        noted: false,
        value: 0,
        stackable: true,
        description: 'A shard of force essence.',
        spriteIndex: 290,
    },
    {
        id: 507,
        name: 'Sharp Shard',
        noted: false,
        value: 0,
        stackable: true,
        description: 'A shard of sharp essence.',
        spriteIndex: 291,
    },
    {
        id: 508,
        name: 'Poison Shard',
        noted: false,
        value: 0,
        stackable: true,
        description: 'A shard of poison essence.',
        spriteIndex: 292,
    },
    {
        id: 509,
        name: 'Bind Shard',
        noted: false,
        value: 1,
        stackable: true,
        description: 'A shard of bind essence.',
        spriteIndex: 293,
    },
    {
        id: 510,
        name: 'Soul Shard',
        noted: false,
        value: 1,
        stackable: true,
        description: 'A shard of soul essence.',
        spriteIndex: 294,
    },
    {
        id: 511,
        name: 'Nature Shard',
        noted: false,
        value: 0,
        stackable: true,
        description: 'A shard of nature essence.',
        spriteIndex: 295,
    },
    {
        id: 512,
        name: 'Carbon',
        noted: false,
        value: 0,
        stackable: true,
        description: 'A pure form of matter.',
        spriteIndex: 296,
    },
    {
        id: 513,
        name: 'Pestle & Mortar',
        noted: false,
        value: 3,
        stackable: false,
        description: 'A bowl to crush ingredients.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(2, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(2, 5, [ShardCatalog.EARTH(8), ShardCatalog.NATURE(1), ShardCatalog.FORCE(3)]),
        spriteIndex: 297,
        useActions: [
            Get.Action.MixEssenceShards(9, 1, 500, 78, 1),
            Get.Action.MixEssenceShards(10, 3, 501, 79, 2),
            Get.Action.MixEssenceShards(11, 6, 502, 80, 3),
            Get.Action.MixEssenceShards(12, 10, 503, 81, 4),
            Get.Action.MixEssenceShards(13, 50, 504, 126, 11),
            Get.Action.MixEssenceShards(14, 16, 505, 493, 6),
            Get.Action.MixEssenceShards(15, 28, 506, 494, 8),
            Get.Action.MixEssenceShards(16, 20, 507, 495, 7),
            Get.Action.MixEssenceShards(25, 34, 508, 496, 9),
            Get.Action.MixEssenceShards(26, 70, 509, 497, 14),
            Get.Action.MixEssenceShards(27, 80, 510, 498, 16),
            Get.Action.MixEssenceShards(28, 50, 511, 499, 11),
        ],
    },
    Get.Item.Note(514, 513, 'Pestle & Mortar', 3, 297),
    {
        id: 515,
        name: 'Grey Wolf Pelt',
        noted: false,
        notedID: 516,
        value: 20,
        stackable: false,
        description: 'A pelt of wolf fur.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(37, 17, 'INCINERATE'),
            ItemDetail.levelSkillDetail('30+', 15, 'CRAFT'),
        ]),
        essenceValue: EssenceValue(37, 10, [ShardCatalog.EARTH(22), ShardCatalog.NATURE(7), ShardCatalog.BIND(30)]),
        spriteIndex: 298,
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 91,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[182, 183]] })]
            ],
        }],
    },
    Get.Item.Note(516, 515, 'Grey Wolf Pelt', 20, 298),
    {
        id: 517,
        name: 'Grey Pelt Torso',
        noted: false,
        notedID: 518,
        value: 130,
        stackable: false,
        description: 'A thick coat made of wolf fur.',
        equipmentStats: [0, 0, 4, 16, 10, 32, -4, -4, 4],
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(39, 17, 'INCINERATE'),
            ItemDetail.levelSkillDetail(30, 5, 'EQUIP'),
            ItemDetail.levelSkillDetail(10, 8, 'EQUIP'),
        ]),
        actions: [{
            interfaceID: 5,
            id: 6,
            name: 'Equip',
            steps: [
                [buildStep(StepType.HAS_SKILL_LEVEL, { params: [5, 30] }),
                buildStep(StepType.HAS_SKILL_LEVEL, { params: [8, 10] }),
                buildStep(StepType.PLAY_ANIMATION, { params: ['EQUIP_CHEST'] }),
                buildStep(StepType.GIVE_EQUIPMENT_ITEM, { params: [3, 'ITEM_ID', 'ITEM_STATE'] })]
            ]
        }],
        model: {
            CHEST_WORN: {
                id: 'CHEST_WORN',
                asset: 'chestParts',
                sprite: 'wolfPeltChest',
                parent: 'CHEST',
                spriteID: 0,
                anchor: { x: 10/22, y: 0.65 },
                position: { x: 0, y: 0.0 },
                rotation: 0,
                UIModel: null,
                z: -1,
                hideParts: ['CHEST_WORN_SHIRT', 'RIGHT_SHOULDER_WORN_SHIRT', 'LEFT_SHOULDER_WORN_SHIRT', 'RIGHT_FOREARM_WORN_SHIRT', 'LEFT_FOREARM_WORN_SHIRT'],
            },
        },
        essenceValue: EssenceValue(39, 50, [ShardCatalog.EARTH(112), ShardCatalog.NATURE(34), ShardCatalog.BIND(180)]),
        spriteIndex: 299,
    },
    Get.Item.Note(518, 517, 'Grey Pelt Torso', 130, 299),
    {
        id: 519,
        name: 'Grey Pelt Pants',
        noted: false,
        notedID: 520,
        value: 56,
        stackable: false,
        description: 'A thick coat made of wolf fur.',
        equipmentStats: [0, 0, 2, 12, 8, 24, -2, -2, 2],
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(38, 17, 'INCINERATE'),
            ItemDetail.levelSkillDetail(30, 5, 'EQUIP'),
            ItemDetail.levelSkillDetail(10, 8, 'EQUIP'),
        ]),
        actions: [{
            interfaceID: 5,
            id: 7,
            name: 'Equip',
            steps: [
                [buildStep(StepType.HAS_SKILL_LEVEL, { params: [5, 30] }),
                buildStep(StepType.HAS_SKILL_LEVEL, { params: [8, 10] }),
                buildStep(StepType.PLAY_ANIMATION, { params: ['EQUIP_LEGS'] }),
                buildStep(StepType.GIVE_EQUIPMENT_ITEM, { params: [4, 'ITEM_ID', 'ITEM_STATE'] })]
            ]
        }],
        model: {
            LEFT_THIGH_WORN: {
                id: 'LEFT_THIGH_WORN',
                asset: 'legParts',
                sprite: 'wolfPeltLeftThigh',
                parent: 'LEFT_THIGH',
                spriteID: 0,
                anchor: { x: (6/9), y: 0.2 },
                position: {x: 0, y: 0},
                rotation: 0,
                UIModel: null,
                hideParts: ['LEFT_THIGH_WORN_PANTS'],
            },
            RIGHT_THIGH_WORN: {
                id: 'RIGHT_THIGH_WORN',
                asset: 'legParts',
                sprite: 'wolfPeltRightThigh',
                parent: 'RIGHT_THIGH',
                spriteID: 0,
                anchor: { x: 1-(6/9), y: 0.2 },
                position: {x: 0, y: 0},
                rotation: 0,
                UIModel: null,
                hideParts: ['RIGHT_THIGH_WORN_PANTS'],
            },
            LEFT_SHIN_WORN: {
                id: 'LEFT_SHIN_WORN',
                asset: 'legParts',
                sprite: 'wolfPeltLeftShin',
                parent: 'LEFT_SHIN',
                spriteID: 0,
                anchor: { x: 0.5, y: 0.1 },
                position: {x: 0, y: 0.1},
                rotation: 0,
                UIModel: null,
                hideParts: ['LEFT_SHIN_WORN_PANTS'],
            },
            RIGHT_SHIN_WORN: {
                id: 'RIGHT_SHIN_WORN',
                asset: 'legParts',
                sprite: 'wolfPeltRightShin',
                parent: 'RIGHT_SHIN',
                spriteID: 0,
                anchor: { x: 0.5, y: 0.1 },
                position: {x: 0, y: 0.1},
                rotation: 0,
                UIModel: null,
                hideParts: ['RIGHT_SHIN_WORN_PANTS'],
            },
        },
        essenceValue: EssenceValue(38, 40, [ShardCatalog.EARTH(84), ShardCatalog.NATURE(26), ShardCatalog.BIND(160)]),
        spriteIndex: 300,
    },
    Get.Item.Note(520, 519, 'Grey Pelt Pants', 56, 300),
    {
        id: 521,
        name: 'Ancient Energy',
        noted: false,
        value: 0,
        stackable: true,
        description: 'Energy from a creature from the underground cavern.',
        spriteIndex: 301,
    },
    {
        id: 522,
        name: 'Stone',
        noted: false,
        value: 0,
        stackable: false,
        description: 'A large rock, good for blocking things.',
        spriteIndex: 302,
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: 'Chisel Stone',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 524,
            flags: ['REPEAT_ACTION'],
            actionInterval: 3,
            steps: [
                [buildStep(StepType.HAS_INVENTORY_ITEM, { params: [522, 1] }),
                buildStep(StepType.HAS_INVENTORY_ITEM, { params: [524, 1] }),
                buildStep(StepType.HAS_SKILL_LEVEL, { params: [15, 1] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [522, 1] }),
                buildStep(StepType.GIVE_INVENTORY_ITEM, { params: [523, 1] }),
                buildStep(StepType.GIVE_XP, { params: [15, 5] }),
                buildStep(StepType.PLAY_ANIMATION, { params: ['FLETCH'] }),
                buildStep(StepType.SEND_CLIENT_MESSAGE, { params: ['You chisel the rock into a block.'] })]
            ],
        }],
    },
    {
        id: 523,
        name: 'Chiseled Stone',
        noted: false,
        value: 0,
        stackable: false,
        description: 'A chiseled rock, perfect for blocking things.',
        spriteIndex: 303,
    },
    {
        id: 524,
        name: 'Chisel',
        noted: false,
        value: 2,
        stackable: false,
        description: 'A metal tool for chipping things.',
        spriteIndex: 304,
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 549,
            flags: ['REPEAT_ACTION'],
            actionInterval: 2,
            steps: [
                [buildStep(StepType.HAS_SKILL_LEVEL, { params: [16, 25] }),
                buildStep(StepType.HAS_INVENTORY_ITEM, { params: [549, 1] }),
                buildStep(StepType.PLAY_ANIMATION, { params: ['FLETCH'] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [549, 1] }),
                buildStep(StepType.GIVE_INVENTORY_ITEM, { params: [550, 1] }),
                buildStep(StepType.SEND_CLIENT_MESSAGE, { params: ['You chip at the spikes to make heavy darts.'] }),
                buildStep(StepType.PLAY_SOUND, { params: [32] })], [
                    buildStep(StepType.HAS_INVENTORY_ITEM, {
                        params: [549, 1],
                        stepResultFail: StepResult.NEXT_STEP_LIST,
                    }),
                    buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [549, 1] }),
                    buildStep(StepType.GIVE_INVENTORY_ITEM, { params: [550, 1] }),
                    buildStep(StepType.GIVE_XP, {
                        stepResultPass: StepResult.END_AND_REPEAT_ACTION,
                        params: [16, 12],
                    }),
                ], [
                    buildStep(StepType.GIVE_XP, { params: [16, 6] })]
            ],
        }],
    },
    Get.Item.Note(525, 524, 'Chisel', 2, 304),
    (() => {
        let dagger = Get.Item.Dagger(526, 527, 'Bone Dagger', 1.5, 320, 305, -1, 15, [16, -8, 0, 0, 0, 0, 0, 0, 0]);
        dagger.attackCooldown = 3;
        dagger.model.RIGHT_TOOL.sprite = 'boneDagger';
        dagger.model.RIGHT_TOOL.spriteID = 0;
        return dagger;
    })(),
    Get.Item.Note(527, 526, 'Bone Dagger', 320, 305),
    (() => {
        let bow = Get.Item.Bow(528, 529, 'Skeleton Bow', 680, 306, [0, 0, 0, 32, 18, 0, 0, 0, 0], 3.5, 35, [68, 69, 70, 558, 71, 276, 304]);
        bow.attackRange = 6;
        bow.attackCooldown = 5;
        bow.model.RIGHT_TOOL.sprite = 'skeletonBow';
        bow.model.RIGHT_TOOL.spriteID = 0;
        return bow;
    })(),
    Get.Item.Note(529, 528, 'Skeleton Bow', 680, 306),
    (() => {
        let shield = Get.Item.Shield(530, 531, 'Ghostly Shield', 1200, 307, [0, 0, 2, 0, 0, 0, 0, 0, 16], 3.5, 35, 8);
        shield.model.LEFT_TOOL.rotation = -90 / 180 * Math.PI;
        shield.model.LEFT_TOOL.position.y -= 0.25;
        shield.model.LEFT_TOOL.sprite = 'ghostShield';
        shield.model.LEFT_TOOL.spriteID = 0;
        return shield;
    })(),
    Get.Item.Note(531, 530, 'Ghostly Shield', 1200, 307),
    {
        id: 532,
        name: 'Ogre Club',
        noted: false,
        notedID: 533,
        value: 1953,
        stackable: false,
        description: 'A slow club with some reach.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(35, 1, 'EQUIP'),
            ItemDetail.levelSkillDetail(70, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(70, 1100, [ShardCatalog.EARTH(240), ShardCatalog.METAL(160), ShardCatalog.FIRE(1600), ShardCatalog.FORCE(800), ShardCatalog.SHARP(100)]),
        spriteIndex: 308,
        combatStyle: Combat.CombatStyle.MELEE,
        attackRange: 2,
        attackCooldown: 8,
        equipmentStats: [-8, 60, 8, -4, -4, 0, 0, 0, 0],
        model: {
            RIGHT_TOOL: {
                id: 'RIGHT_TOOL',
                asset: 'heldParts',
                sprite: 'ogreClub',
                parent: 'RIGHT_FOREARM',
                spriteID: 0,
                anchor: { x: 0.95, y: 0.5 },
                position: { x: 0, y: 0.75 },
                rotation: 0,
                UIModel: null,
            },
        },
        actions: [{
            interfaceID: 5,
            id: 4,
            name: 'Equip',
            steps: [
                [buildStep(StepType.HAS_SKILL_LEVEL, { params: [1, 35] }),
                buildStep(StepType.PLAY_ANIMATION, { params: ['EQUIP_RIGHT_SHOULDER_SHEATH'] }),
                buildStep(StepType.GIVE_EQUIPMENT_ITEM, { params: [1, 'ITEM_ID', 'ITEM_STATE'] })]
            ]
        }],
    },
    Get.Item.Note(533, 532, 'Ogre Club', 1953, 308),
    {
        id: 534,
        name: 'Inferno Knife',
        noted: false,
        notedID: 535,
        value: 2154,
        stackable: false,
        description: 'A sharp tool for cutting and burning logs. Warm to the touch.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('20+', 16, 'USE'),
            ItemDetail.levelSkillDetail(45, 17, 'INCINERATE'),
        ]),
        spriteIndex: 309,
        essenceValue: EssenceValue(45, 1142, [ShardCatalog.SHARP(20), ShardCatalog.METAL(4), ShardCatalog.FIRE(910)]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 5,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[165, 166]] })]
            ],
        }, {
            interfaceID: 5,
            id: 10,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 6,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[167, 168]] })]
            ],
        }, {
            interfaceID: 5,
            id: 11,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 7,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[169, 170]] })]
            ],
        }, {
            interfaceID: 5,
            id: 12,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 8,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[171, 172]] })]
            ],
        },
        {
            interfaceID: 5,
            id: 13,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 315,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[173, 174]] })]
            ],
        },
        {
            interfaceID: 5,
            id: 14,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 317,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[175, 176]] })]
            ],
        },
        {
            interfaceID: 5,
            id: 48,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 844,
            actionInterval: 4,
            steps: [
                [
                    buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [844, 1] }),
                    buildStep(StepType.GIVE_INVENTORY_ITEM, { params: [848, 1] }),
                ]
            ],
        },],
    },
    Get.Item.Note(535, 534, 'Inferno Knife', 2154, 309),
    {
        id: 536,
        name: 'Shell Chest Key',
        description: 'A key to open the shell chest.',
        noted: false,
        value: 12,
        stackable: true,
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(6, 17, 'INCINERATE'),
        ]),
        spriteIndex: 310,
        essenceValue: EssenceValue(6, 10, [ShardCatalog.EARTH(8), ShardCatalog.METAL(12)]),
    },
    {
        id: 537,
        name: 'Red Silk',
        noted: false,
        notedID: 538,
        value: 224,
        stackable: false,
        description: '',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('40+', 15, 'CRAFT'),
            ItemDetail.levelSkillDetail(46, 17, 'INCINERATE'),
        ]),
        spriteIndex: 311,
        essenceValue: EssenceValue(46, 10, [ShardCatalog.AIR(300), ShardCatalog.EARTH(700), ShardCatalog.NATURE(120), ShardCatalog.BIND(250)]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 91,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[177, 178, 179]] })]
            ],
    }],
    },
    Get.Item.Note(538, 537, 'Red Silk', 224, 311),
    Get.Item.WizardHat(539, 540, 'Red Wizard Hat', 5, 5, 312, 760, 40),
    Get.Item.Note(540, 539, 'Red Wizard Hat', 760, 312),
    Get.Item.RobeChest(541, 542, 'Red Wizard Top', 313, 5, 1420, [0, 0, 0, 0, 0, -10, 20, 20, 50], 40),
    Get.Item.Note(542, 541, 'Red Wizard Top', 1420, 313),
    Get.Item.RobeLegs(543, 544, 'Red Wizard Bottom', 314, 5, 1175, [0, 0, 0, 0, 0, -5, 15, 15, 40], 40),
    Get.Item.Note(544, 543, 'Red Wizard Bottom', 1175, 314),
    (() => {
        let helm = Get.Item.FullHelm(545, 546, 'Shell Helmet', 1, 340, 315, -1, 5, [0, 0, 12, 0, 0, 4, -4, -4, 0]);
        helm.model.HEAD_WORN.position.x -= 0.1;
        helm.model.HEAD_WORN.position.y -= 0.45;
        helm.model.HEAD_WORN.sprite = 'shellHelm';
        helm.model.HEAD_WORN.spriteID = 0;
        return helm;
    })(),
    Get.Item.Note(546, 545, 'Shell Helmet', 340, 315),
    (() => {
        let bow = Get.Item.Bow(547, 548, 'Anchor Crossbow', 540, 316, [0, 0, 2, 14, 14, 0, 0, 0, -2], 3.5, 35, [550]);
        bow.attackRange = 8;
        bow.attackCooldown = 7;
        bow.model.RIGHT_TOOL.sprite = 'anchorCrossbow';
        bow.model.RIGHT_TOOL.spriteID = 0;
        return bow;
    })(),
    Get.Item.Note(548, 547, 'Anchor Crossbow', 540, 316),
    {
        id: 549,
        name: 'Rock Spike',
        noted: false,
        value: 3,
        stackable: true,
        description: 'A sharp spike made of rock.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(20, 17, 'INCINERATE'),
            ItemDetail.levelSkillDetail(20, 16, 'FLETCH'),
        ]),
        spriteIndex: 317,
        essenceValue: EssenceValue(20, 2, [ShardCatalog.EARTH(12), ShardCatalog.AIR(10), ShardCatalog.SHARP(10)]),
    },
    Get.Item.Arrows(550, 'Rock Bolts', 5, 318, 25, [0, 0, 0, 10, 16, 0, 0, 0, 0], 11),
    {
        id: 551,
        name: 'Wolf Claws',
        noted: false,
        value: 2,
        stackable: true,
        description: 'Claws of a mighty wolf.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(16, 17, 'INCINERATE'),
            ItemDetail.levelSkillDetail(25, 16, 'FLETCH'),
        ]),
        spriteIndex: 319,
        essenceValue: EssenceValue(16, 1, [ShardCatalog.EARTH(8), ShardCatalog.FORCE(4), ShardCatalog.SHARP(4)]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: 'Use',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 72,
            actionInterval: 0,
            flags: ['REPEAT_ACTION'],
            steps: [
                [buildStep(StepType.COMBINE_ITEMS, { params: [72, 551, 558, 5, 16, 25] })]
            ],
        }, {
            interfaceID: 5,
            id: 10,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 74,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.SEND_CLIENT_MESSAGE, { params: ['You should add feathers to this first.'] })]
            ],
        }],
    }, {
        id: 552,
        name: 'D. Grey Wolf Pelt',
        noted: false,
        notedID: 553,
        value: 120,
        stackable: false,
        description: 'A pelt of dark wolf fur.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(57, 17, 'INCINERATE'),
            ItemDetail.levelSkillDetail('50+', 15, 'CRAFT'),
        ]),
        essenceValue: EssenceValue(57, 60, [ShardCatalog.EARTH(52), ShardCatalog.SOUL(2), ShardCatalog.NATURE(17), ShardCatalog.BIND(80)]),
        spriteIndex: 320,
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 91,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.OPEN_ACTION_MENU_INTERFACE, { params: [[184, 185]] })]
            ],
        }],
    },
    Get.Item.Note(553, 515, 'Grey Wolf Pelt', 120, 320),
    {
        id: 554,
        name: 'D. Grey Pelt Torso',
        noted: false,
        notedID: 555,
        value: 780,
        stackable: false,
        description: 'A thick coat made of dark wolf fur.',
        equipmentStats: [0, 0, 8, 24, 14, 46, -8, -8, 6],
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(59, 17, 'INCINERATE'),
            ItemDetail.levelSkillDetail(50, 5, 'EQUIP'),
            ItemDetail.levelSkillDetail(10, 8, 'EQUIP'),
        ]),
        model: {
            CHEST_WORN: {
                id: 'CHEST_WORN',
                asset: 'chestParts',
                sprite: 'wolfPeltChest',
                parent: 'CHEST',
                spriteID: 1,
                anchor: { x: 10/22, y: 0.65 },
                position: { x: 0, y: 0.0 },
                rotation: 0,
                UIModel: null,
                z: -1,
                hideParts: ['CHEST_WORN_SHIRT', 'RIGHT_SHOULDER_WORN_SHIRT', 'LEFT_SHOULDER_WORN_SHIRT', 'RIGHT_FOREARM_WORN_SHIRT', 'LEFT_FOREARM_WORN_SHIRT'],
            },
        },
        actions: [{
            interfaceID: 5,
            id: 6,
            name: 'Equip',
            steps: [
                [buildStep(StepType.HAS_SKILL_LEVEL, { params: [5, 50] }),
                buildStep(StepType.HAS_SKILL_LEVEL, { params: [8, 10] }),
                buildStep(StepType.PLAY_ANIMATION, { params: ['EQUIP_CHEST'] }),
                buildStep(StepType.GIVE_EQUIPMENT_ITEM, { params: [3, 'ITEM_ID', 'ITEM_STATE'] })]
            ]
        }],
        essenceValue: EssenceValue(59, 320, [ShardCatalog.EARTH(262), ShardCatalog.NATURE(84), ShardCatalog.BIND(180)]),
        spriteIndex: 321,
    },
    Get.Item.Note(555, 517, 'D. Grey Pelt Torso', 780, 321),
    {
        id: 556,
        name: 'D. Grey Pelt Pants',
        noted: false,
        notedID: 557,
        value: 615,
        stackable: false,
        description: 'A thick coat made of dark wolf fur.',
        equipmentStats: [0, 0, 4, 15, 10, 34, -4, -4, 4],
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(58, 17, 'INCINERATE'),
            ItemDetail.levelSkillDetail(50, 5, 'EQUIP'),
            ItemDetail.levelSkillDetail(10, 8, 'EQUIP'),
        ]),
        actions: [{
            interfaceID: 5,
            id: 7,
            name: 'Equip',
            steps: [
                [buildStep(StepType.HAS_SKILL_LEVEL, { params: [5, 50] }),
                buildStep(StepType.HAS_SKILL_LEVEL, { params: [8, 10] }),
                buildStep(StepType.PLAY_ANIMATION, { params: ['EQUIP_LEGS'] }),
                buildStep(StepType.GIVE_EQUIPMENT_ITEM, { params: [4, 'ITEM_ID', 'ITEM_STATE'] })]
            ]
        }],
        model: {
            LEFT_THIGH_WORN: {
                id: 'LEFT_THIGH_WORN',
                asset: 'legParts',
                sprite: 'wolfPeltLeftThigh',
                parent: 'LEFT_THIGH',
                spriteID: 1,
                anchor: { x: (4/7), y: 0.1 },
                position: {x: 0, y: 0},
                rotation: 0,
                UIModel: null,
                hideParts: ['LEFT_THIGH_WORN_PANTS'],
            },
            RIGHT_THIGH_WORN: {
                id: 'RIGHT_THIGH_WORN',
                asset: 'legParts',
                sprite: 'wolfPeltRightThigh',
                parent: 'RIGHT_THIGH',
                spriteID: 1,
                anchor: { x: 1-(4/7), y: 0.1 },
                position: {x: 0, y: 0},
                rotation: 0,
                UIModel: null,
                hideParts: ['RIGHT_THIGH_WORN_PANTS'],
            },
            LEFT_SHIN_WORN: {
                id: 'LEFT_SHIN_WORN',
                asset: 'legParts',
                sprite: 'wolfPeltLeftShin',
                parent: 'LEFT_SHIN',
                spriteID: 1,
                anchor: { x: 0.5, y: 0 },
                position: {x: 0, y: 0},
                rotation: 0,
                UIModel: null,
                hideParts: ['LEFT_SHIN_WORN_PANTS'],
            },
            RIGHT_SHIN_WORN: {
                id: 'RIGHT_SHIN_WORN',
                asset: 'legParts',
                sprite: 'wolfPeltRightShin',
                parent: 'RIGHT_SHIN',
                spriteID: 1,
                anchor: { x: 0.5, y: 0 },
                position: {x: 0, y: 0},
                rotation: 0,
                UIModel: null,
                hideParts: ['RIGHT_SHIN_WORN_PANTS'],
            },
        },
        essenceValue: EssenceValue(59, 335, [ShardCatalog.EARTH(215), ShardCatalog.NATURE(70), ShardCatalog.BIND(400)]),
        spriteIndex: 322,
    },
    Get.Item.Note(557, 519, 'D. Grey Pelt Pants', 615, 322),
    Get.Item.Arrows(558, 'Wolf Claw Arrows', 16, 323, 25, [0, 0, 0, 16, 12, 0, 0, 0, 0], 12),
    {
        id: 559,
        name: 'Wolf Paw',
        noted: false,
        notedID: 560,
        value: 89,
        stackable: false,
        description: 'A wolf paw gleaming with power and aggression.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(74, 17, 'INCINERATE'),
            ItemDetail.levelSkillDetail(50, 15, 'CRAFT'),
        ]),
        useActions: [{
            interfaceID: 5,
            id: 9,
            name: '',
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 92,
            actionInterval: 0,
            steps: [
                [buildStep(StepType.HAS_SKILL_LEVEL, { params: [15, 50] }),
                buildStep(StepType.HAS_INVENTORY_ITEM, { params: [559, 1] }),
                buildStep(StepType.HAS_INVENTORY_ITEM, { params: [92, 1] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [92, 1] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [559, 1] }),
                buildStep(StepType.GIVE_XP, { params: [15, 400] }),
                buildStep(StepType.GIVE_INVENTORY_ITEM, { params: [561, 1] })]
            ],
        }],
        spriteIndex: 324,
        essenceValue: EssenceValue(74, 80, [ShardCatalog.EARTH(1400), ShardCatalog.FORCE(620), ShardCatalog.SHARP(440)]),
    },
    Get.Item.Note(560, 559, 'Wolf Paw', 89, 324),
    {
        id: 561,
        name: 'Wolf Paw Necklace',
        noted: false,
        notedID: 562,
        value: 149,
        stackable: false,
        equipmentStats: [0, 3, 0, 0, 0, 0, 0, 0, 0],
        description: 'A powerful wolf paw necklace. Increases aggression chance from enemies.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(74, 17, 'INCINERATE'),
        ]),
        spriteIndex: 325,
        essenceValue: EssenceValue(74, 81, [ShardCatalog.EARTH(1444), ShardCatalog.FORCE(620), ShardCatalog.SHARP(442)]),
        model: {
            NECK_WORN: {
                id: 'NECK_WORN',
                asset: 'neckParts',
                sprite: 'necklaceWolf',
                parent: 'HEAD',
                spriteID: 0,
                anchor: { x: 0.5, y: 0.15 },
                position: { x: 0, y: 0.2 },
                rotation: 0,
                UIModel: null,
                z: -1,
            },
        },
        reaggressionChance: 3,
        actions: [{
            interfaceID: 5,
            id: 3,
            name: 'Equip',
            steps: [
                [buildStep(StepType.PLAY_ANIMATION, { params: ['EQUIP_NECKLACE'] }),
                buildStep(StepType.GIVE_EQUIPMENT_ITEM, { params: [6, 'ITEM_ID', 'ITEM_STATE'] })]
            ]
        }],
    },
    Get.Item.Note(562, 561, 'Wolf Paw Necklace', 149, 325),
    {
        id: 563,
        name: 'Scrambler (Item)',
        noted: false,
        value: 1400,
        stackable: false,
        description: 'An artifact capeable of redirecting enchantments.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(65, 17, 'INCINERATE'),
        ]),
        essenceValue: EssenceValue(65, 70, [ShardCatalog.AIR(3130), ShardCatalog.EARTH(2430), ShardCatalog.SOUL(800), ShardCatalog.NATURE(100), ShardCatalog.FIRE(290)]),
        spriteIndex: 326,
        state: ItemStates.CHARGE.build(20),
        actions: [],
        useActions: [{
            interfaceID: 5,
            id: 11,
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 327,
            actionInterval: 0,
            name: 'Scramble',
            steps: [
                [buildStep(StepType.RANDOMIZE_ITEM_STATE_ITEMID, { params: ['SLOT_ID_OTHER', 327] }),
                buildStep(StepType.USE_ITEM_CHARGES, { params: ['SLOT_ID', 563, 1] })],
            ],
        }, {
            interfaceID: 5,
            id: 12,
            entityType: Entity.EntityType.INVENTORY_ITEM,
            entityID: 329,
            actionInterval: 0,
            name: 'Scramble',
            steps: [
                [buildStep(StepType.RANDOMIZE_ITEM_STATE_ITEMID, { params: ['SLOT_ID_OTHER', 329] }),
                buildStep(StepType.USE_ITEM_CHARGES, { params: ['SLOT_ID', 563, 1] })],
            ],
        }],
    },
    {
        id: 564,
        name: 'Obelisk Teleport',
        noted: false,
        value: 14,
        stackable: true,
        description: 'A teleport to the obelisk minigame.',
        essenceValue: EssenceValue(34, 6, [ShardCatalog.VOID(70), ShardCatalog.AIR(100), ShardCatalog.FIRE(340)]),
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(34, 17, 'INCINERATE'),
        ]),
        spriteIndex: 327,
        actions: [{
            interfaceID: 5,
            id: 17,
            steps: [
                [buildStep(StepType.SEND_CLIENT_MESSAGE, { params: ['You rip the into pieces...'] }),
                buildStep(StepType.HAS_INVENTORY_ITEM, { params: [564, 1] }),
                buildStep(StepType.IS_TIMER_EXPIRED, { params: [11] }),
                buildStep(StepType.REMOVE_INVENTORY_ITEM, { params: [564, 1] }),
                buildStep(StepType.TELEPORT, { params: [1, 142, 149, 145, 152, 3] })]
            ],
        }],
    },
    Get.Item.GolemFragment(565, 'Clay Golem Fragment', 141, 'A fragment of gleaming, solid clay.', 1, 45, 566, 8, [ShardCatalog.EARTH(43), ShardCatalog.FORCE(300), ShardCatalog.SHARP(12)], 328),
    Get.Item.GolemFragmentNecklace(566, 'Clay Fragment Necklace', 567, 149, 'A necklace gleaming with clay power. Provides a 1% chance to get two ores when mining clay.', 8, [ShardCatalog.EARTH(43), ShardCatalog.FORCE(300), ShardCatalog.SHARP(12)], 329, 0),
    Get.Item.Note(567, 566, 'Clay Fragment Necklace', 149, 329),
    Get.Item.GolemChunk(568, 'Clay Golem Chunk', 164, 'A chunk of solid clay.', 1, 45, 569, 9, [ShardCatalog.EARTH(49), ShardCatalog.FORCE(340), ShardCatalog.SHARP(10)], 330),
    Get.Item.GolemChunkNecklace(569, 'Clay Chunk Necklace', 570, 167, 'A necklace made of strong clay. Provides a 10% chance to save a clay node from depleting.', 9, [ShardCatalog.EARTH(50), ShardCatalog.FORCE(340), ShardCatalog.SHARP(10)], 331, 0),
    Get.Item.Note(570, 569, 'Clay Chunk Necklace', 167, 331),
    Get.Item.GolemFragment(571, 'Copper Golem Fragment', 195, 'A fragment of gleaming, solid copper.', 1, 45, 572, 8, [ShardCatalog.EARTH(43), ShardCatalog.FORCE(300), ShardCatalog.SHARP(12)], 332),
    Get.Item.GolemFragmentNecklace(572, 'Copper Fragment Necklace', 573, 202, 'A necklace gleaming with copper power. Provides a 1% chance to get two ores when mining copper.', 8, [ShardCatalog.EARTH(43), ShardCatalog.FORCE(300), ShardCatalog.SHARP(12)], 333, 1),
    Get.Item.Note(573, 572, 'Copper Fragment Necklace', 202, 333),
    Get.Item.GolemChunk(574, 'Copper Golem Chunk', 204, 'A chunk of solid copper.', 1, 45, 575, 9, [ShardCatalog.EARTH(49), ShardCatalog.FORCE(340), ShardCatalog.SHARP(10)], 334),
    Get.Item.GolemChunkNecklace(575, 'Copper Chunk Necklace', 576, 210, 'A necklace made of strong copper. Provides a 10% chance to save a copper node from depleting.', 9, [ShardCatalog.EARTH(50), ShardCatalog.FORCE(340), ShardCatalog.SHARP(10)], 335, 1),
    Get.Item.Note(576, 575, 'Copper Chunk Necklace', 210, 335),
    Get.Item.GolemFragment(577, 'Iron Golem Fragment', 244, 'A fragment of gleaming, solid iron.', 10, 90, 578, 18, [ShardCatalog.EARTH(63), ShardCatalog.FORCE(400), ShardCatalog.SHARP(22)], 336),
    Get.Item.GolemFragmentNecklace(578, 'Iron Fragment Necklace', 579, 252, 'A necklace gleaming with iron power. Provides a 1% chance to get two ores when mining iron.', 18, [ShardCatalog.EARTH(63), ShardCatalog.FORCE(400), ShardCatalog.SHARP(22)], 337, 2),
    Get.Item.Note(579, 578, 'Iron Fragment Necklace', 252, 336),
    Get.Item.GolemChunk(580, 'Iron Golem Chunk', 266, 'A chunk of solid iron.', 10, 90, 581, 19, [ShardCatalog.EARTH(69), ShardCatalog.FORCE(440), ShardCatalog.SHARP(20)], 338),
    Get.Item.GolemChunkNecklace(581, 'Iron Chunk Necklace', 582, 271, 'A necklace made of a strong iron chunk. Provides a 10% chance to save an iron node from depleting.', 19, [ShardCatalog.EARTH(70), ShardCatalog.FORCE(440), ShardCatalog.SHARP(20)], 339, 2),
    Get.Item.Note(582, 581, 'Iron Chunk Necklace', 271, 339),
    Get.Item.GolemFragment(583, 'Coal Golem Fragment', 380, 'A fragment of gleaming, solid coal.', 20, 135, 584, 28, [ShardCatalog.EARTH(83), ShardCatalog.FORCE(500), ShardCatalog.SHARP(32)], 340),
    Get.Item.GolemFragmentNecklace(584, 'Coal Fragment Necklace', 585, 392, 'A necklace gleaming with coal power. Provides a 1% chance to get two ores when mining coal.', 28, [ShardCatalog.EARTH(83), ShardCatalog.FORCE(500), ShardCatalog.SHARP(32)], 341, 3),
    Get.Item.Note(585, 584, 'Coal Fragment Necklace', 392, 341),
    Get.Item.GolemChunk(586, 'Coal Golem Chunk', 399, 'A chunk of solid coal.', 20, 135, 587, 29, [ShardCatalog.EARTH(89), ShardCatalog.FORCE(540), ShardCatalog.SHARP(30)], 342),
    Get.Item.GolemChunkNecklace(587, 'Coal Chunk Necklace', 588, 404, 'A necklace made of a strong coal chunk. Provides a 10% chance to save a coal node from depleting.', 29, [ShardCatalog.EARTH(90), ShardCatalog.FORCE(540), ShardCatalog.SHARP(30)], 343, 3),
    Get.Item.Note(588, 587, 'Coal Chunk Necklace', 404, 343),
    Get.Item.GolemFragment(589, 'Nelenite Golem Fragment', 510, 'A fragment of gleaming, solid nelenite.', 30, 180, 590, 38, [ShardCatalog.EARTH(103), ShardCatalog.FORCE(600), ShardCatalog.SHARP(42)], 344),
    Get.Item.GolemFragmentNecklace(590, 'Nelenite Fragment Necklace', 591, 525, 'A necklace gleaming with nelenite power. Provides a 1% chance to get two ores when mining nelenite.', 38, [ShardCatalog.EARTH(103), ShardCatalog.FORCE(600), ShardCatalog.SHARP(42)], 345, 4),
    Get.Item.Note(591, 590, 'Nelenite Fragment Necklace', 525, 345),
    Get.Item.GolemChunk(592, 'Nelenite Golem Chunk', 540, 'A chunk of solid nelenite.', 30, 180, 593, 39, [ShardCatalog.EARTH(109), ShardCatalog.FORCE(640), ShardCatalog.SHARP(40)], 346),
    Get.Item.GolemChunkNecklace(593, 'Nelenite Chunk Necklace', 594, 549, 'A necklace made of a strong nelenite rock. Provides a 10% chance to save a nelenite node from depleting.', 39, [ShardCatalog.EARTH(110), ShardCatalog.FORCE(640), ShardCatalog.SHARP(40)], 347, 4),
    Get.Item.Note(594, 593, 'Nelenite Chunk Necklace', 549, 347),
    Get.Item.GolemFragment(595, 'Gothite Golem Fragment', 710, 'A fragment of gleaming, solid gothite.', 40, 225, 596, 48, [ShardCatalog.EARTH(123), ShardCatalog.FORCE(700), ShardCatalog.SHARP(52)], 348),
    Get.Item.GolemFragmentNecklace(596, 'Gothite Fragment Necklace', 597, 725, 'A necklace gleaming with gothite power. Provides a 1% chance to get two ores when mining gothite.', 48, [ShardCatalog.EARTH(123), ShardCatalog.FORCE(700), ShardCatalog.SHARP(52)], 349, 5),
    Get.Item.Note(597, 596, 'Gothite Fragment Necklace', 725, 549),
    Get.Item.GolemChunk(598, 'Gothite Golem Chunk', 743, 'A chunk of solid gothite.', 40, 225, 599, 49, [ShardCatalog.EARTH(129), ShardCatalog.FORCE(740), ShardCatalog.SHARP(50)], 350),
    Get.Item.GolemChunkNecklace(599, 'Gothite Chunk Necklace', 599, 750, 'A necklace made of strong gothite rock. Provides a 10% chance to save a gothite node from depleting.', 49, [ShardCatalog.EARTH(130), ShardCatalog.FORCE(740), ShardCatalog.SHARP(50)], 351, 5),
    Get.Item.Note(600, 599, 'Gothite Chunk Necklace', 750, 351),
    Get.Item.GolemFragment(601, 'Osmium Golem Fragment', 923, 'A fragment of gleaming, solid osmium.', 50, 270, 602, 58, [ShardCatalog.EARTH(143), ShardCatalog.FORCE(800), ShardCatalog.SHARP(62)], 352),
    Get.Item.GolemFragmentNecklace(602, 'Osmium Fragment Necklace', 603, 950, 'A necklace gleaming with osmium power. Provides a 1% chance to get two ores when mining osmium.', 58, [ShardCatalog.EARTH(143), ShardCatalog.FORCE(800), ShardCatalog.SHARP(62)], 353, 6),
    Get.Item.Note(603, 602, 'Osmium Fragment Necklace', 950, 535),
    Get.Item.GolemChunk(604, 'Osmium Golem Chunk', 953, 'A chunk of solid osmium.', 50, 270, 605, 59, [ShardCatalog.EARTH(149), ShardCatalog.FORCE(840), ShardCatalog.SHARP(60)], 354),
    Get.Item.GolemChunkNecklace(605, 'Osmium Chunk Necklace', 605, 971, 'A necklace made of a strong osmium rock. Provides a 10% chance to save a osmium node from depleting.', 59, [ShardCatalog.EARTH(150), ShardCatalog.FORCE(840), ShardCatalog.SHARP(60)], 355, 6),
    Get.Item.Note(606, 605, 'Osmium Chunk Necklace', 971, 355),
    {
        id: 607,
        name: 'Bind Strike',
        noted: false,
        value: 80,
        spriteIndex: 356,
        //not finished
    },
    Get.Item.TeleportPot(608, 'Hyrill Teleport', 118, 'A teleport spell to the city of Hyrill.', 26, 68, 30, 100, 19, 357),
    Get.Item.TeleportPot(609, 'Bodiam Teleport', 129, 'A teleport spell to the city of Bodiam.', 30, 71, 60, 110, 20, 358),
    Get.Item.DeathScythe(610),
    {
        id: 611,
        name: 'Full Indie Brochure',
        noted: false,
        value: 0,
        stackable: false,
        state: ItemStates.INFORMATION.build('Full Indie DEMO NIGHT!\nJuly 2019'),
        // requirements: ItemDetail.build([
        //     ItemDetail.levelSkillDetail(1, 17, 'INCINERATE'),
        // ]),
        spriteIndex: 360,
        // essenceValue: EssenceValue(1, 0, [ShardCatalog.EARTH(1)]),
    },
    Get.Item.MaxLevelStandard(612, 'Melee Focus Standard', 361, 0, 'A tall banner displaying your mastery of the melee focus skill.'),
    Get.Item.MaxLevelStandard(613, 'Melee Power Standard', 362, 1, 'A tall banner displaying your mastery of the melee power skill.'),
    Get.Item.MaxLevelStandard(614, 'Melee Defense Standard', 363, 2, 'A tall banner displaying your mastery of the melee defense skill.'),
    Get.Item.MaxLevelStandard(615, 'Ranged Focus Standard', 364, 3, 'A tall banner displaying your mastery of the ranged focus skill.'),
    Get.Item.MaxLevelStandard(616, 'Ranged Power Standard', 365, 4, 'A tall banner displaying your mastery of the ranged power skill.'),
    Get.Item.MaxLevelStandard(617, 'Ranged Defense Standard', 366, 5, 'A tall banner displaying your mastery of the ranged defense skill.'),
    Get.Item.MaxLevelStandard(618, 'Magic Focus Standard', 367, 6, 'A tall banner displaying your mastery of the magic focus skill.'),
    Get.Item.MaxLevelStandard(619, 'Magic Power Standard', 368, 7, 'A tall banner displaying your mastery of the magic power skill.'),
    Get.Item.MaxLevelStandard(620, 'Magic Defense Standard', 369, 8, 'A tall banner displaying your mastery of the magic defense skill.'),
    Get.Item.MaxLevelStandard(621, 'Woodcutting Standard', 370, 9, 'A tall banner displaying your mastery of the woodcutting skill.'),
    Get.Item.MaxLevelStandard(622, 'Mining Standard', 371, 10, 'A tall banner displaying your mastery of the mining skill.'),
    Get.Item.MaxLevelStandard(623, 'Hitpoints Standard', 372, 11, 'A tall banner displaying your mastery of the hitpoints skill.'),
    Get.Item.MaxLevelStandard(624, 'Fishing Standard', 373, 12, 'A tall banner displaying your mastery of the fishing skill.'),
    Get.Item.MaxLevelStandard(625, 'Cooking Standard', 374, 13, 'A tall banner displaying your mastery of the cooking skill.'),
    Get.Item.MaxLevelStandard(626, 'Smithing Standard', 375, 14, 'A tall banner displaying your mastery of the smithing skill.'),
    Get.Item.MaxLevelStandard(627, 'Crafting Standard', 376, 15, 'A tall banner displaying your mastery of the crafting skill.'),
    Get.Item.MaxLevelStandard(628, 'Fletching Standard', 377, 16, 'A tall banner displaying your mastery of the fletching skill.'),
    Get.Item.MaxLevelStandard(629, 'Firemaking Standard', 378, 17, 'A tall banner displaying your mastery of the firemaking skill.'),
    Get.Item.MaxLevelStandard(630, 'Construction Standard', 379, 18, 'A tall banner displaying your mastery of the construction skill.'),
    Get.Item.MaxLevelStandard(631, 'Alchemy Standard', 380, 19, 'A tall banner displaying your mastery of the alchemy skill.'),
    Get.Item.MaxLevelStandard(632, 'Thieving Standard', 381, 20, 'A tall banner displaying your mastery of the thieving skill.'),
    Get.Item.Food(633, 634, 'Candy Cane', 3, 5, 383, 'A delicious candy cane!', EssenceValue(7, 4, [ShardCatalog.WATER(5), ShardCatalog.NATURE(1), ShardCatalog.FIRE(2)])),
    Get.Item.Note(634, 633, 'Candy Cane', 5, 383),
    Get.Item.Food(635, null, 'Candy', 1, 5, 420, 'Mmm a candy!', EssenceValue(7, 4, [ShardCatalog.WATER(5), ShardCatalog.NATURE(1), ShardCatalog.FIRE(2)]), true),
    Get.Item.UncutGem(636, 637, 'Uncut Opal', 1, 12, 3, 1, 659, 15, 384),
    Get.Item.Note(637, 636, 'Uncut Opal', 3, 384),
    Get.Item.UncutGem(638, 639, 'Uncut Topaz', 6, 16, 5, 2, 660, 30, 388),
    Get.Item.Note(639, 638, 'Uncut Topaz', 5, 388),
    Get.Item.UncutGem(640, 641, 'Uncut Quartz', 12, 20, 11, 3, 661, 45, 392),
    Get.Item.Note(641, 640, 'Uncut Quartz', 11, 392),
    Get.Item.UncutGem(642, 643, 'Uncut Jade', 18, 24, 19, 4, 662, 60, 396),
    Get.Item.Note(643, 642, 'Uncut Jade', 19, 396),
    Get.Item.UncutGem(644, 645, 'Uncut Amber', 24, 28, 28, 5, 663, 80, 400),
    Get.Item.Note(645, 644, 'Uncut Amber', 28, 400),
    Get.Item.UncutGem(646, 647, 'Uncut Sapphire', 30, 32, 40, 6, 664, 100, 404),
    Get.Item.Note(647, 646, 'Uncut Sapphire', 40, 404),
    Get.Item.UncutGem(648, 649, 'Uncut Amethyst', 36, 36, 52, 7, 665, 125, 408),
    Get.Item.Note(649, 648, 'Uncut Amethyst', 52, 408),
    Get.Item.UncutGem(650, 651, 'Uncut Emerald', 42, 40, 66, 8, 666, 150, 412),
    Get.Item.Note(651, 650, 'Uncut Emerald', 66, 412),
    Get.Item.UncutGem(652, 653, 'Uncut Ruby', 48, 44, 80, 9, 667, 175, 416),
    Get.Item.Note(653, 652, 'Uncut Ruby', 80, 416),
    Get.Item.UncutGem(654, 655, 'Uncut Onyx', 54, 48, 98, 10, 668, 200, 422),
    Get.Item.Note(655, 654, 'Uncut Onyx', 98, 422),
    Get.Item.UncutGem(656, 657, 'Uncut Diamond', 60, 52, 118, 11, 669, 250, 426),
    Get.Item.Note(657, 656, 'Uncut Diamond', 118, 426),
    {
        id: 658,
        name: 'Gem Shards',
        noted: false,
        stackable: true,
        value: 0,
        essenceValue: EssenceValue(70, 1, [ShardCatalog.SHARP(2), ShardCatalog.FIRE(2)]),
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(70, 17, 'INCINERATE'),
        ]),
        spriteIndex: 483,
    },
    Get.Item.CutGem(659, 'Opal', 1, 13, 5, 1, ItemStates.CUT_GEM.build(0), 50, 385, 676),
    Get.Item.CutGem(660, 'Topaz', 6, 17, 6, 2, ItemStates.CUT_GEM.build(0), 100, 389, 677),
    Get.Item.CutGem(661, 'Quartz', 12, 21, 13, 3, ItemStates.CUT_GEM.build(0), 200, 393, 678),
    Get.Item.CutGem(662, 'Jade', 18, 25, 23, 4, ItemStates.CUT_GEM.build(0), 300, 397, 679),
    Get.Item.CutGem(663, 'Amber', 24, 29, 36, 5, ItemStates.CUT_GEM.build(0), 400, 401, 680),
    Get.Item.CutGem(664, 'Sapphire', 30, 33, 51, 6, ItemStates.CUT_GEM.build(0), 500, 405, 681),
    Get.Item.CutGem(665, 'Amethyst', 36, 37, 70, 7, ItemStates.CUT_GEM.build(0), 600, 409, 682),
    Get.Item.CutGem(666, 'Emerald', 42, 41, 88, 8, ItemStates.CUT_GEM.build(0), 800, 413, 683),
    Get.Item.CutGem(667, 'Ruby', 48, 45, 114, 9, ItemStates.CUT_GEM.build(0), 1000, 417, 684),
    Get.Item.CutGem(668, 'Onyx', 54, 49, 212, 10, ItemStates.CUT_GEM.build(0), 1250, 423, 685),
    Get.Item.CutGem(669, 'Diamond', 60, 53, 360, 11, ItemStates.CUT_GEM.build(0), 1500, 427, 686),
    Get.Item.Ore(670, 671, 'Gold Ore', 15, 430, 3.5),
    Get.Item.Note(671, 670, 'Gold Ore', 15, 430),
    Get.Item.GoldBar(672, 673, 'Gold Bar', 50, 431, 3.5),
    Get.Item.Note(673, 672, 'Gold Bar', 50, 431),
    Get.Item.GoldAmulet(674, 675, 'Gold Amulet', 20, 20, 57, 432 ),
    Get.Item.Note(675, 674, 'Gold Amulet', 57, 432),
    Get.Item.Item(676, null, 'Silk Thread', 2, 567, 'A strand of silk.', EssenceValue(70, 1, [ShardCatalog.EARTH(2), ShardCatalog.BIND(1)]), true),
    Get.Item.Item(677, 678, 'Silk', 8, 568, 'A piece of unenchanted silk.',  EssenceValue(70, 1,  [ShardCatalog.AIR(30), ShardCatalog.EARTH(20), ShardCatalog.NATURE(3), ShardCatalog.BIND(20)])),
    Get.Item.Note(678, 677, 'Silk', 8, 568),
    Get.Item.CrabPot(679, 680, 'Crab Pot', 44, 560),
    Get.Item.Note(680, 679, 'Crab Pot', 44, 560),
    Get.Item.NullItem(681),
    Get.Item.NullItem(682),
    Get.Item.NullItem(683),
    Get.Item.NullItem(684),
    Get.Item.NullItem(685),
    Get.Item.NullItem(686),
    Get.Item.SpellUnlockScroll(687, 'Lesser Air Wound', 0, 24, 444, 32, EssenceValue(70, 1,[ShardCatalog.NATURE(12), ShardCatalog.AIR(180)])),
    Get.Item.SpellUnlockScroll(688, 'Lesser Water Wound', 1, 35, 445, 34, EssenceValue(70, 1,[ShardCatalog.NATURE(12), ShardCatalog.WATER(180)])),
    Get.Item.SpellUnlockScroll(689, 'Lesser Earth Wound', 2, 41, 446, 36, EssenceValue(70, 1,[ShardCatalog.NATURE(12), ShardCatalog.EARTH(180)])),
    Get.Item.SpellUnlockScroll(690, 'Lesser Fire Wound', 3, 48, 447, 38, EssenceValue(70, 1, [ShardCatalog.NATURE(12), ShardCatalog.FIRE(180)])),
    Get.Item.SpellUnlockScroll(691, 'Lesser Metal Wound', 4, 59, 448, 40, EssenceValue(70, 1,[ShardCatalog.NATURE(12), ShardCatalog.METAL(180)])),
    Get.Item.SpellUnlockScroll(692, 'Air Wound', 5, 119, 449, 32, EssenceValue(70, 1, [ShardCatalog.NATURE(18), ShardCatalog.AIR(280)])),
    Get.Item.SpellUnlockScroll(693, 'Water Wound', 6, 121, 450, 34, EssenceValue(70, 1,[ShardCatalog.NATURE(18), ShardCatalog.WATER(280)])),
    Get.Item.SpellUnlockScroll(694, 'Earth Wound', 7, 142, 451, 36, EssenceValue(70, 1,[ShardCatalog.NATURE(18), ShardCatalog.EARTH(280)])),
    Get.Item.SpellUnlockScroll(695, 'Fire Wound', 8, 159, 452, 38, EssenceValue(70, 1,[ShardCatalog.NATURE(18), ShardCatalog.FIRE(280)])),
    Get.Item.SpellUnlockScroll(696, 'Metal Wound', 9, 177, 453, 40, EssenceValue(70, 1,[ShardCatalog.NATURE(18), ShardCatalog.METAL(280)])),
    Get.Item.SpellUnlockScroll(697, 'Greater Air Wound', 10, 231, 454, 32, EssenceValue(70, 1,[ShardCatalog.NATURE(25), ShardCatalog.AIR(380)])),
    Get.Item.SpellUnlockScroll(698, 'Greater Water Wound', 11, 242, 455, 34, EssenceValue(70, 1,[ShardCatalog.NATURE(25), ShardCatalog.WATER(380)])),
    Get.Item.SpellUnlockScroll(699, 'Greater Earth Wound', 12, 276, 456, 36, EssenceValue(70, 1,[ShardCatalog.NATURE(25), ShardCatalog.EARTH(380)])),
    Get.Item.SpellUnlockScroll(700, 'Greater Fire Wound', 13, 289, 457, 38, EssenceValue(70, 1,[ShardCatalog.NATURE(25), ShardCatalog.FIRE(380)])),
    Get.Item.SpellUnlockScroll(701, 'Greater Metal Wound', 14, 330, 458, 40, EssenceValue(70, 1,[ShardCatalog.NATURE(25), ShardCatalog.METAL(380)])),
    Get.Item.SpellPot(702, 'Lesser Metal Wound', 4, 18, 8, 8, 58, EssenceValue(70, 1,[ShardCatalog.AIR(195), ShardCatalog.EARTH(14), ShardCatalog.NATURE(1), ShardCatalog.METAL(90), ShardCatalog.FIRE(5), ShardCatalog.FORCE(10)]), 459, 5),
    Get.Item.SpellPot(703, 'Air Wound', 5, 26, 10, 10, 60, EssenceValue(70, 1,[ShardCatalog.AIR(295), ShardCatalog.EARTH(14), ShardCatalog.NATURE(1), ShardCatalog.FIRE(5), ShardCatalog.FORCE(20)]), 460, 6),
    Get.Item.SpellPot(704, 'Water Wound', 6, 30, 12, 12, 62, EssenceValue(70, 1,[ShardCatalog.AIR(195), ShardCatalog.EARTH(14), ShardCatalog.NATURE(1), ShardCatalog.WATER(190), ShardCatalog.FIRE(5), ShardCatalog.FORCE(20)]), 461, 6),
    Get.Item.SpellPot(705, 'Earth Wound', 7, 34, 14, 14, 64, EssenceValue(70, 1,[ShardCatalog.AIR(195), ShardCatalog.EARTH(204), ShardCatalog.NATURE(1), ShardCatalog.FIRE(5), ShardCatalog.FORCE(20)]), 462, 6),
    Get.Item.SpellPot(706, 'Fire Wound', 8, 38, 16, 16, 66, EssenceValue(70, 1,[ShardCatalog.AIR(195), ShardCatalog.EARTH(14), ShardCatalog.NATURE(1), ShardCatalog.FIRE(195), ShardCatalog.FORCE(20)]), 463, 6),
    Get.Item.SpellPot(707, 'Metal Wound', 9, 42, 18, 18, 68, EssenceValue(70, 1,[ShardCatalog.AIR(195), ShardCatalog.EARTH(14), ShardCatalog.NATURE(1), ShardCatalog.METAL(190), ShardCatalog.FIRE(5), ShardCatalog.FORCE(20)]), 464, 6),
    Get.Item.SpellPot(708, 'Greater Air Wound', 10, 54, 20, 20, 70, EssenceValue(70, 1,[ShardCatalog.AIR(395), ShardCatalog.EARTH(14), ShardCatalog.NATURE(1), ShardCatalog.FIRE(5), ShardCatalog.FORCE(30)]), 465, 6),
    Get.Item.SpellPot(709, 'Greater Water Wound', 11, 58, 22, 22, 72, EssenceValue(70, 1,[ShardCatalog.AIR(295), ShardCatalog.EARTH(14), ShardCatalog.NATURE(1), ShardCatalog.WATER(285), ShardCatalog.FIRE(5), ShardCatalog.FORCE(30)]), 466, 6),
    Get.Item.SpellPot(710, 'Greater Earth Wound', 12, 62, 24, 24, 74, EssenceValue(70, 1,[ShardCatalog.AIR(295), ShardCatalog.EARTH(299), ShardCatalog.NATURE(1), ShardCatalog.FIRE(5), ShardCatalog.FORCE(30)]), 467, 6),
    Get.Item.SpellPot(711, 'Greater Fire Wound', 13, 66, 26, 26, 76, EssenceValue(70, 1,[ShardCatalog.AIR(295), ShardCatalog.EARTH(14), ShardCatalog.NATURE(1), ShardCatalog.FIRE(290), ShardCatalog.FORCE(30)]), 468, 6),
    Get.Item.SpellPot(712, 'Greater Metal Wound', 14, 70, 28, 28, 78, EssenceValue(70, 1,[ShardCatalog.AIR(295), ShardCatalog.EARTH(14), ShardCatalog.NATURE(1), ShardCatalog.METAL(285), ShardCatalog.FIRE(5), ShardCatalog.FORCE(30)]), 469, 6),
    Get.Item.TeleportPot(713, 'Woodcutting Guild Teleport', 140, 'A teleport spell to the Woodcutting Guild.', 34, 74, 40, 120, 21, 470),
    Get.Item.TeleportPot(714, 'Mining Guild Teleport', 144, 'A teleport spell to the Mining Guild.', 38, 77, 70, 130, 22, 471),
    Get.Item.SpellUnlockScroll(715, 'Fiewon Teleport', 15, 512, 472, 32, EssenceValue(70, 1,[ShardCatalog.NATURE(20), ShardCatalog.EARTH(180)])),
    Get.Item.SpellUnlockScroll(716, 'Salmo Teleport', 16, 672, 473, 36, EssenceValue(70, 1,[ShardCatalog.NATURE(20), ShardCatalog.EARTH(180)])),
    Get.Item.SpellUnlockScroll(717, 'Volcano Teleport', 17, 755, 474, 40, EssenceValue(70, 1,[ShardCatalog.NATURE(20), ShardCatalog.EARTH(180)])),
    Get.Item.SpellUnlockScroll(718, 'Island Teleport', 18, 525, 475, 44, EssenceValue(70, 1,[ShardCatalog.NATURE(20), ShardCatalog.EARTH(180)])),
    Get.Item.SpellUnlockScroll(719, 'Hyrill Teleport', 19, 742, 476, 48, EssenceValue(70, 1,[ShardCatalog.NATURE(20), ShardCatalog.EARTH(180)])),
    Get.Item.SpellUnlockScroll(720, 'Bodiam Teleport', 20, 523, 477, 52, EssenceValue(70, 1,[ShardCatalog.NATURE(20), ShardCatalog.EARTH(180)])),
    Get.Item.SpellUnlockScroll(721, 'Woodcutting Guild Teleport', 21, 843, 478, 56, EssenceValue(70, 1,[ShardCatalog.NATURE(20), ShardCatalog.EARTH(180)])),
    Get.Item.SpellUnlockScroll(722, 'Mining Guild Teleport', 22, 941, 479, 60, EssenceValue(70, 1, [ShardCatalog.NATURE(20), ShardCatalog.EARTH(180)])),
    Get.Item.SpecialShirt(723, 'Pre-Alpha Shirt', 480, 'shirtVersionMilestone', 1, 15, 'In commemoration of players who played in pre-alpha' ),
    Get.Item.NullItem(724),
    Get.Item.SpecialShirt(725, 'Alpha Shirt', 481, 'shirtVersionMilestone', 2, 15, 'In commemoration of players who played in alpha' ),
    Get.Item.NullItem(726),
    Get.Item.SpellUnlockScroll(727, '3x3 Item Pickup', 23, 550, 484, 45, EssenceValue(70, 1,[ShardCatalog.BIND(120), ShardCatalog.AIR(180)])),
    Get.Item.SpellUnlockScroll(728, '5x5 Item Pickup', 24, 1850, 485, 55, EssenceValue(70, 1,[ShardCatalog.BIND(220), ShardCatalog.AIR(380)])),
    Get.Item.TutorialTeleport(729),
    Get.Item.Item(730, null, 'Osaik\'s Key', 5, 482, 'The key to Osaik\'s safe. Give this to him', EssenceValue(1, 2, [ShardCatalog.EARTH(2)]), false),
    Get.Item.NullItem(731),
    Get.Item.MixableCookingItem(732, 733, 'Egg', 2, 486, 'An egg.', EssenceValue(1, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false, Get.Recipes.Dough() ), // Jaegar look at last 3 params
    Get.Item.Note(733, 732, 'Egg', 2, 486),
    Get.Item.Food(734, 733, 'Egg', 2, 3, 487, 'A nicely fried egg.', EssenceValue(2, 2, [ShardCatalog.EARTH(5), ShardCatalog.NATURE(4), ShardCatalog.FIRE(5)]), false),
    Get.Item.Note(735, 734, 'Egg', 3, 487),
    {
        id: 736,
        name: 'Burnt Egg',
        noted: false,
        notedID: 737,
        value: 0,
        itemCannotBeRolled: true,
        stackable: false,
        description: 'A burnt egg...',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(2, 17, 'INCINERATE'),
        ]),
        spriteIndex: 488,
        essenceValue: EssenceValue(2, 1, [ShardCatalog.POISON(2), ShardCatalog.EARTH(1)]),
    },
    Get.Item.Note(737, 736, 'Burnt Egg', 0, 488),
    {
        id: 738,
        name: 'Raw Chicken',
        noted: false,
        notedID: 739,
        value: 2,
        stackable: false,
        description: 'A raw chicken.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail('1', 13, 'CRAFT'),
            ItemDetail.levelSkillDetail(1, 17, 'INCINERATE'),
        ]),
        spriteIndex: 489,
        essenceValue: EssenceValue(1, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]),
    },
    Get.Item.Note(739, 738, 'Raw Chicken', 2, 489),
    Get.Item.Food(740, 741, 'Chicken', 3, 3, 490, 'A nicely cooked chicken.', EssenceValue(2, 2, [ShardCatalog.EARTH(5), ShardCatalog.NATURE(4), ShardCatalog.FIRE(5)]), false),
    Get.Item.Note(741, 740, 'Chicken', 3, 490),
    {
        id: 742,
        name: 'Burnt Chicken',
        noted: false,
        notedID: 743,
        value: 0,
        itemCannotBeRolled: true,
        stackable: false,
        description: 'A burnt chickens...',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(2, 17, 'INCINERATE'),
        ]),
        spriteIndex: 491,
        essenceValue: EssenceValue(2, 1, [ShardCatalog.POISON(5), ShardCatalog.EARTH(5)]),
    },
    Get.Item.Note(743, 742, 'Burnt Chicken', 0, 491),
    Get.Item.Item(744, null, 'Empty Bucket', 2, 492, 'A empty bucket.', EssenceValue(3, 2, [ShardCatalog.EARTH(4)]), true ), // Jaegar look at last 3 params
    Get.Item.Note(745, 744, 'Empty Bucket', 2, 492),
    Get.Item.BucketOfWater(746, 747, 'Bucket of Water', 2, 493, 'The bucket is full of water', EssenceValue(5, 2, [ShardCatalog.EARTH(4), ShardCatalog.WATER(4)]), false, Get.Recipes.Dough() ), // Jaegar look at last 3 params
    Get.Item.Note(747, 746, 'Bucket of Water', 2, 493),
    Get.Item.FullBucket(748, 749, 'Bucket of Milk', 5, 494, 'The bucket is full of milk', EssenceValue(7, 2, [ShardCatalog.EARTH(4), ShardCatalog.WATER(4)]), false), // Jaegar look at last 3 params
    Get.Item.Note(749, 748, 'Bucket of Milk', 5, 494),
    Get.Item.FullBucket(750, 751, 'Bucket of Flour', 4, 495, 'The bucket is full of flour', EssenceValue(10, 2, [ShardCatalog.EARTH(6)]), Get.Recipes.Dough(), false), // Jaegar look at last 3 params
    Get.Item.Note(751, 750, 'Bucket of Flour', 4, 495),
    Get.Item.RawCoockableFood(752, 753, 'Raw Steak', 3, 496, 'A raw steak, perfect for cooking.', 2, EssenceValue(4, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false), // Jaegar look at last 3 params
    Get.Item.Note(753, 752, 'Raw Steak', 3, 496),
    Get.Item.Food(754, 755, 'Cooked Steak', 4, 4, 497, 'A cooked steak, perfect for eating.', EssenceValue(6, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false), // Jaegar look at last 3 params
    Get.Item.Note(755, 754, 'Cooked Steak', 4, 497),
    Get.Item.Item(756, 757, 'Burnt Steak', 0, 498, 'A burnt steak. Too well done.', EssenceValue(8, 2, [ShardCatalog.EARTH(5), ShardCatalog.NATURE(1)]), false), // Jaegar look at last 3 params
    Get.Item.Note(757, 756, 'Burnt Steak', 0, 498),
    Get.Item.Item(758, 759, 'Wheat', 2, 499, 'Useful for making flour.', EssenceValue(3, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false), // Jaegar look at last 3 params
    Get.Item.Note(759, 758, 'Wheat', 2, 499),
    Get.Item.Item(760, null, 'Dough', 5, 500, 'Needed for baking goods.', EssenceValue(5, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), true), // Jaegar look at last 3 params
    Get.Item.Pan(761),
    Get.Item.NullItem(762),
    Get.Item.Item(763, 764, 'Uncooked Meatpie', 9, 502, 'Can be cooked into a Meatpie', EssenceValue(5, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false  ), // Jaegar look at last 3 params
    Get.Item.Note(764, 763, 'Uncooked Meatpie', 9, 502),
    Get.Item.Food(765, 766, 'Meatpie', 5, 13, 503, 'Mmm delicious.', EssenceValue(5, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false  ), // Jaegar look at last 3 params
    Get.Item.Note(766, 765, 'Meatpie', 13, 503),
    Get.Item.Item(767, 768, 'Burnt Meatpie', 0, 504, 'A burnt meat pie', EssenceValue(8, 2, [ShardCatalog.EARTH(2), ShardCatalog.NATURE(2), ShardCatalog.POISON(8)]), false  ), // Jaegar look at last 3 params
    Get.Item.Note(768, 767, 'Burnt Meatpie', 0, 504),

    Get.Item.Item(769, 770, 'Uncooked Chicken Pot Pie', 8, 505, 'Can be cooked into a Chicken Pot Pie', EssenceValue(5, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false  ), // Jaegar look at last 3 params
    Get.Item.Note(770, 769, 'Uncooked Chicken Pot Pie', 8, 505),
    Get.Item.Food(771, 772, 'Chicken Pot Pie', 4, 11, 506, 'Mmm delicious.', EssenceValue(5, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false  ), // Jaegar look at last 3 params
    Get.Item.Note(772, 771, 'Chicken Pot Pie', 11, 506),
    Get.Item.Item(773, 774, 'Burnt Chicken Pot Pie', 0, 507, 'A burnt chicken pot pie', EssenceValue(7, 2, [ShardCatalog.EARTH(2), ShardCatalog.NATURE(2), ShardCatalog.POISON(10)]), false  ), // Jaegar look at last 3 params
    Get.Item.Note(774, 773, 'Burnt Chicken Pot Pie', 0, 507),

    Get.Item.Item(775, 776, 'Raw Cake', 12, 508, 'Can be cooked into a Cake', EssenceValue(5, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false  ), // Jaegar look at last 3 params
    Get.Item.Note(776, 775, 'Raw Cake', 12, 508),
    Get.Item.Food(777, 778, 'Cake', 6, 16, 509, 'Party Time!', EssenceValue(7, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false  ), // Jaegar look at last 3 params
    Get.Item.Note(778, 777, 'Cake', 16, 509),
    Get.Item.Item(779, 780, 'Burnt Cake', 0, 510, 'A burnt cake', EssenceValue(14, 2, [ShardCatalog.EARTH(2), ShardCatalog.NATURE(2), ShardCatalog.POISON(12)]), false  ), // Jaegar look at last 3 params
    Get.Item.Note(780, 779, 'Burnt Cake', 0, 510),

    Get.Item.Item(781, 782, 'Wool', 2, 511, 'Fluffy wool from a sheep', EssenceValue(3, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false), // Jaegar look at last 3 params
    Get.Item.Note(782, 781, 'Wool', 2, 511),
    Get.Item.Item(783, null, 'Yarn', 4, 512, 'Threaded wool', EssenceValue(4, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), true  ), // Jaegar look at last 3 params
    Get.Item.NullItem(784),
    Get.Item.RawFish(785, 786, 'Freshwater Tuna', 10, 5, 5, 10, 513, EssenceValue(1, 2, [ShardCatalog.NATURE(5)])),
    Get.Item.Note(786, 785, 'Freshwater Tuna', 10, 513),
    Get.Item.Fish(787, 788, 'Freshwater Tuna', 15, 514, 5, 5, 10, EssenceValue(1, 2, [ShardCatalog.EARTH(3), ShardCatalog.FIRE(3), ShardCatalog.NATURE(5)])),
    Get.Item.Note(788, 787, 'Freshwater Tuna', 15, 514),
    Get.Item.Item(789, 790, 'Burnt Freshwater Tuna', 1, 515, 'A burnt freshwater tuna', EssenceValue(1, 2, [ShardCatalog.EARTH(1), ShardCatalog.NATURE(1)]), false ),
    Get.Item.Note(790, 791, 'Burnt Freshwater Tuna', 1, 515),
    Get.Item.Item(791, 792, 'Herbs', 1, 516, 'Used to make spices.', EssenceValue(1, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false  ),
    Get.Item.Note(792, 791, 'Herbs', 1, 516),
    Get.Item.BucketOfHerbs(793, 794, 'Bucket of Refined Herbs', 15, 517, 'Used as spicing in recipes.', EssenceValue(1, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false  ),
    Get.Item.Note(794, 793, 'Bucket of Refined Herbs', 15, 517),
    Get.Item.Food(795, 796, 'Chicken Supreme', 4, 30, 518, 'A delicious, well seasoned chicken dish.', EssenceValue(1, 2, [ShardCatalog.EARTH(15), ShardCatalog.NATURE(10)]), false, Get.Recipes.ChickenSupreme() ),
    Get.Item.Note(796, 795, 'Chicken Supreme', 30, 518),
    Get.Item.Food(797, 798, 'Gourmet Tuna', 4, 30, 519, 'Seasoned freshwater tuna cooked to perfection.', EssenceValue(1, 2, [ShardCatalog.EARTH(15), ShardCatalog.NATURE(10)]), false, Get.Recipes.GourmetTuna() ),
    Get.Item.Note(798, 797, 'Gourmet Tuna', 30, 519),
    Get.Item.GoldRing(799, 800, 'Gold Ring', 5, 20, 52, 522),
    Get.Item.Note(800, 799, 'Gold Ring', 52, 522),
    Get.Item.NullItem(801),
    Get.Item.NullItem(802),
    Get.Item.NullItem(803),
    Get.Item.NullItem(804),
    Get.Item.NullItem(805),
    Get.Item.NullItem(806),
    Get.Item.NullItem(807),
    Get.Item.NullItem(808),
    Get.Item.NullItem(809),
    Get.Item.NullItem(810),
    Get.Item.NullItem(811),
    Get.Item.Mold(812, 813, 'Ring Mold', 2, 521, 'A mold to form a ring in.', EssenceValue(4, 1, [ShardCatalog.EARTH(8)])),
    Get.Item.Note(813, 812, 'Ring Mold', 2, 521),
    Get.Item.Mold(814, 815, 'Amulet Mold', 3, 520, 'A mold to form an amulet in.', EssenceValue(4, 1, [ShardCatalog.EARTH(8)])),
    Get.Item.Note(815, 814, 'Amulet Mold', 3, 520),
    Get.Item.SpellUnlockScroll(816, 'Goblin Outpost Teleport', 35, 32, 534, 32, [ShardCatalog.NATURE(120), ShardCatalog.WATER(600), ShardCatalog.VOID(270)]),
    Get.Item.SpellUnlockScroll(817, 'Party Room Teleport', 38, 44, 535, 34, [ShardCatalog.NATURE(120), ShardCatalog.AIR(600), ShardCatalog.VOID(270)]),
    Get.Item.SpellUnlockScroll(818, 'Patreon Embassy Teleport', 39, 52, 536, 37, [ShardCatalog.NATURE(120), ShardCatalog.WATER(360), ShardCatalog.VOID(270)]),
    Get.Item.SpellUnlockScroll(819, 'Fortify Melee Focus', 31, 112, 537, 44, [ShardCatalog.NATURE(120), ShardCatalog.FIRE(360), ShardCatalog.SOUL(170)]),
    Get.Item.SpellUnlockScroll(820, 'Fortify Melee Power', 34, 123, 538, 46, [ShardCatalog.NATURE(120), ShardCatalog.FIRE(360), ShardCatalog.SOUL(170)]),
    Get.Item.SpellUnlockScroll(821, 'Fortify Melee Defense', 28, 108, 539, 42, [ShardCatalog.NATURE(120), ShardCatalog.FIRE(360), ShardCatalog.SOUL(170)]),
    Get.Item.SpellUnlockScroll(822, 'Fortify Ranged Focus', 29, 113, 540, 42, [ShardCatalog.NATURE(120), ShardCatalog.AIR(360), ShardCatalog.SOUL(170)]),
    Get.Item.SpellUnlockScroll(823, 'Fortify Ranged Power', 32, 108, 541, 44, [ShardCatalog.NATURE(120), ShardCatalog.AIR(360), ShardCatalog.SOUL(170)]),
    Get.Item.SpellUnlockScroll(824, 'Fortify Ranged Defense', 26, 98, 542, 40, [ShardCatalog.NATURE(120), ShardCatalog.AIR(360), ShardCatalog.SOUL(170)]),
    Get.Item.SpellUnlockScroll(825, 'Fortify Magic Focus', 30, 116, 543, 44, [ShardCatalog.NATURE(120), ShardCatalog.WATER(360), ShardCatalog.SOUL(170)]),
    Get.Item.SpellUnlockScroll(826, 'Fortify Magic Power', 33, 119, 544, 45, [ShardCatalog.NATURE(120), ShardCatalog.WATER(360), ShardCatalog.SOUL(170)]),
    Get.Item.SpellUnlockScroll(827, 'Fortify Magic Defense', 27, 103, 545, 43, [ShardCatalog.NATURE(120), ShardCatalog.WATER(360), ShardCatalog.SOUL(170)]),
    Get.Item.SpellUnlockScroll(828, 'Item Collection', 52, 674, 546, 64, [ShardCatalog.NATURE(400), ShardCatalog.EARTH(1400), ShardCatalog.SOUL(520)]),
    Get.Item.SpellUnlockScroll(829, 'Auto Consume', 53, 845, 547, 78, [ShardCatalog.NATURE(400), ShardCatalog.WATER(1800), ShardCatalog.VOID(800)]),
    Get.Item.SpellUnlockScroll(830, 'Syphon Air Essence', 40, 34, 548, 11, [ShardCatalog.NATURE(290), ShardCatalog.SOUL(90), ShardCatalog.AIR(300)]),
    Get.Item.SpellUnlockScroll(831, 'Syphon Water Essence', 41, 39, 549, 14, [ShardCatalog.NATURE(290), ShardCatalog.SOUL(90), ShardCatalog.WATER(300)]),
    Get.Item.SpellUnlockScroll(832, 'Syphon Earth Essence', 42, 46, 550, 17, [ShardCatalog.NATURE(290), ShardCatalog.SOUL(90), ShardCatalog.EARTH(300)]),
    Get.Item.SpellUnlockScroll(833, 'Syphon Fire Essence', 43, 53, 551, 22, [ShardCatalog.NATURE(290), ShardCatalog.SOUL(90), ShardCatalog.FIRE(300)]),
    Get.Item.SpellUnlockScroll(834, 'Syphon Void Essence', 44, 386, 552, 64, [ShardCatalog.NATURE(290), ShardCatalog.SOUL(90), ShardCatalog.VOID(300)]),
    Get.Item.SpellUnlockScroll(835, 'Syphon Metal Essence', 45, 72, 553, 26, [ShardCatalog.NATURE(290), ShardCatalog.SOUL(90), ShardCatalog.METAL(300)]),
    Get.Item.SpellUnlockScroll(836, 'Syphon Force Essence', 46, 115, 554, 42, [ShardCatalog.NATURE(290), ShardCatalog.SOUL(90), ShardCatalog.FORCE(300)]),
    Get.Item.SpellUnlockScroll(837, 'Syphon Sharp Essence', 47, 126, 555, 44, [ShardCatalog.NATURE(290), ShardCatalog.SOUL(90), ShardCatalog.SHARP(300)]),
    Get.Item.SpellUnlockScroll(838, 'Syphon Poison Essence', 48, 221, 556, 48, [ShardCatalog.NATURE(290), ShardCatalog.SOUL(90), ShardCatalog.POISON(300)]),
    Get.Item.SpellUnlockScroll(839, 'Syphon Bind Essence', 49, 472, 557, 54, [ShardCatalog.NATURE(290), ShardCatalog.SOUL(90), ShardCatalog.BIND(300)]),
    Get.Item.SpellUnlockScroll(840, 'Syphon Soul Essence', 50, 416, 558, 70, [ShardCatalog.NATURE(290), ShardCatalog.SOUL(90), ShardCatalog.SOUL(300)]),
    Get.Item.SpellUnlockScroll(841, 'Syphon Nature Essence', 51, 398, 559, 58, [ShardCatalog.NATURE(290), ShardCatalog.SOUL(90), ShardCatalog.NATURE(300)]),
    Get.Item.SpellUnlockScroll(842, 'Enchant Volcano Teleport', 36, 114, 474, 41, [ShardCatalog.NATURE(120), ShardCatalog.EARTH(600), ShardCatalog.VOID(270)]),
    Get.Item.SpellUnlockScroll(843, 'Wizard Tower Teleport', 37, 187, 478, 46, [ShardCatalog.NATURE(120), ShardCatalog.FIRE(360), ShardCatalog.VOID(270)]),
    Get.Item.RawCoockableFood(844, 845, 'Raw Octopus', 90, 561, 'A raw octopus, perfect for cooking.', 70, EssenceValue(4, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false), // Jaegar look at last 3 params
    Get.Item.Note(845, 844, 'Raw Octopus', 90, 561),
    Get.Item.Food(846, 847, 'Octopus', 10, 130, 562, 'A cooked octopus, perfect for eating.', EssenceValue(6, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false), // Jaegar look at last 3 params
    Get.Item.Note(847, 846, 'Octopus', 130, 562),
    Get.Item.Item(848, 849, 'Burnt Octopus', 0, 563, 'A burnt octopus. Yuck.', EssenceValue(8, 2, [ShardCatalog.EARTH(5), ShardCatalog.NATURE(1), ShardCatalog.POISON(100)]), false), // Jaegar look at last 3 params
    Get.Item.Note(849, 548, 'Burnt Octopus', 0, 563),
    Get.Item.RawCoockableFood(850, 851, 'Raw Octopus Tentacle', 8, 564, 'A raw octopus tentacle, perfect for cooking.', 15, EssenceValue(4, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false), // Jaegar look at last 3 params
    Get.Item.Note(851, 850, 'Raw Octopus Tentacle', 8, 564),
    Get.Item.Food(852, 853, 'Octopus Tentacle', 2, 10, 565, 'A cooked octopus tentacle, perfect for eating.', EssenceValue(6, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false), // Jaegar look at last 3 params
    Get.Item.Note(853, 852, 'Octopus Tentacle', 10, 565),
    Get.Item.Item(854, 855, 'Burnt Octopus Tentacle', 0, 566, 'A burnt octopus tentacle. Yuck.', EssenceValue(8, 2, [ShardCatalog.EARTH(5), ShardCatalog.NATURE(1), ShardCatalog.POISON(20)]), false), // Jaegar look at last 3 params
    Get.Item.Note(855, 854, 'Burnt Octopus Tentacle', 0, 566),

    // Emperor's General
    Get.Item.Helmet(856, 557, 'Generals\'s Helmet', 110, 200, 569, null, 70, [0, 0, 6, 0, 0, 2, -2, -2, -3] ), // Emperor's General Helmet -  Tier 1
    Get.Item.Note(857, 856, 'Generals\'s Helmet', 200, 569),
    Get.Item.GeneralsPlatebody(858, 859, 'General\'s Platebody', 110, 200, 570, null, 70, [0, 2, 28, 0, 0, 14, -14, -14, -20]),
    Get.Item.Note(859, 858, 'Generals\'s Platebody', 200, 570),
    Get.Item.Platelegs(860, 861, 'General\'s Platelegs', 110, 200, 571, null, 70, [0, 2, 20, 0, 0, 10, -10, -10, -16]),
    Get.Item.Note(861, 860, 'Generals\'s Platebody', 200, 571),

    // Emperor's Sorcerer
    Get.Item.WizardHat(862, 863, 'Sorcerors\'s Hat', 5, 100, 572, 760, 50),
    Get.Item.Note(863, 862, 'Sorcerors\'s Hat', 93, 572),
    Get.Item.RobeChest(864, 865, 'Sorcerors\'s Top', 573, 100, 1420, [0, 0, 0, 0, 0, -10, 20, 20, 50], 40),
    Get.Item.Note(865, 864, 'Sorcerors\'s Top', 1420, 573),
    Get.Item.RobeLegs(866, 867, 'Sorcerors\'s Bottom', 574, 100, 1175, [0, 0, 0, 0, 0, -5, 15, 15, 40], 40),
    Get.Item.Note(867, 866, 'Sorcerors\'s Bottom', 1175, 574),

    // Elite Emperor's Guard
    Get.Item.Helmet(868, 869, 'EmpOps\'s Helmet', 101, 200, 575, null, 70, [0, 0, 6, 0, 0, 2, -2, -2, -3] ), // Emperor's General Helmet -  Tier 1
    Get.Item.Note(869, 868, 'EmpOps\'s Helmet', 200, 575),
    Get.Item.EmperorGuardPlatebody(870, 871, 'EmpOps\'s Platebody', 101, 200, 576, null, 70, [0, 2, 28, 0, 0, 14, -14, -14, -20]),
    Get.Item.Note(871, 870, 'EmpOps\'s Platebody', 200, 576),
    Get.Item.Platelegs(872, 873, 'EmpOps\'s Platelegs', 101, 200, 577, null, 70, [0, 2, 20, 0, 0, 10, -10, -10, -16]),
    Get.Item.Note(873, 872, 'EmpOps\'s Platelegs', 200, 577),

    // Tier 1 Emperor's guard
    Get.Item.Helmet(874, 875, 'Emperor\'s Guard\'s Helmet', 100, 200, 578, null, 70, [0, 0, 6, 0, 0, 2, -2, -2, -3] ), // Emperor's General Helmet -  Tier 1
    Get.Item.Note(875, 874, 'Emperor\'s Guard\'s Helmet', 200, 578),
    Get.Item.EmperorGuardPlatebody(876, 877, 'Emperor\'s Guard\'s Platebody', 100, 200, 579, null, 70, [0, 2, 28, 0, 0, 14, -14, -14, -20]),
    Get.Item.Note(877, 876, 'Emperor\'s Guard\'s Platebody', 200, 579),
    Get.Item.Platelegs(878, 879, 'Emperor\'s Guard\'s Platelegs', 100, 200, 580, null, 70, [0, 2, 20, 0, 0, 10, -10, -10, -16]),
    Get.Item.Note(879, 878, 'Emperor\'s Guard\'s Platebody', 200, 580),

    // Grand Sorceror
    Get.Item.WizardHat(880, 881, 'Grand Sorcerors\'s Hat', 101, 101, 581, 760, 50),
    Get.Item.Note(881, 880, 'Grand Sorcerors\'s Hat', 200, 581),

    // Mining Guild Master Outfit
    Get.Item.GuildHat(882, 883, 'Teregon Guild Master\'s Hat', 100, 582, 'guildHat', 0, 'Teregon Guild Master\'s Hat'),
    Get.Item.Note(883, 882, 'Teregon Guild Master\'s Hat', 200, 582),
    Get.Item.GuildShirt(884, 885, 'Teregon Guild Master\'s Shirt', 0, 100, 583, 'Teregon Guild Master\'s lucky shirt!'),
    Get.Item.Note(885, 884, 'Teregon Guild Master\'s Shirt', 200, 583),
    Get.Item.GuildPants(886, 887, 'Teregon Guild Master\'s Pants', 0, 100, 584, 'These seem to be Teregon Guild Master\'s pants!'),
    Get.Item.Note(887, 886, 'Teregon Guild Master Platelegs', 200, 584),

    // Fishing Guild Master Outfit
    Get.Item.GuildHat(888, 889, 'Salmo Guild Master\'s Hat', 100, 585, 'guildHat', 1, 'Salmo Guild Master\'s Hat'),
    Get.Item.Note(889, 888, 'Salmo Guild Master\'s Hat', 200, 585),
    Get.Item.GuildShirt(890, 891, 'Salmo Guild Master\'s Shirt', 1, 100, 586, 'Salmo Guild Master\'s lucky shirt!'),
    Get.Item.Note(891, 890, 'Salmo Guild Master\'s Shirt', 200, 586),
    Get.Item.GuildPants(892, 893, 'Salmo Guild Master\'s Pants', 1, 100, 587, 'These seem to be Salmo Guild Master\'s pants!'),
    Get.Item.Note(893, 892, 'Salmo Guild Master\'s Pants', 200, 587),

    // Woodcutting Guild Master Outfit
    Get.Item.GuildHat(894, 895, 'Acernis Guild Master\'s Hat', 100, 588, 'guildHat', 2, 'Acernis Guild Master\'s Hat'),
    Get.Item.Note(895, 894, 'Acernis Guild Master\'s Hat', 200, 588),
    Get.Item.GuildShirt(896, 897, 'Acernis Guild Master\'s Shirt', 2, 100, 589, 'Acernis Guild Master\'s lucky shirt!'),
    Get.Item.Note(897, 898, 'Acernis Guild Master\'s Shirt', 200, 589),
    Get.Item.GuildPants(898, 899, 'Acernis Guild Master\'s Pants', 2, 100, 587, 'These seem to be Acernis Guild Master\'s pants!'),
    Get.Item.Note(899, 898, 'Acernis Guild Master\'s Pants', 200, 590),    
    
    Get.Item.RawCoockableFood(900, 901, 'Raw Crab', 22, 591, 'A raw crab, tastes better cooked.', 30, EssenceValue(4, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false), // Jaegar look at last 3 params
    Get.Item.Note(901, 900, 'Raw Crab', 22, 591),
    Get.Item.Food(902, 903, 'Crab', 6, 35, 592, 'A well cooked crab.', EssenceValue(6, 2, [ShardCatalog.EARTH(10), ShardCatalog.NATURE(5)]), false), // Jaegar look at last 3 params
    Get.Item.Note(903, 902, 'Crab', 35, 592),
    Get.Item.Item(904, 905, 'Burnt Crab', 0, 593, 'A burnt crab.', EssenceValue(8, 2, [ShardCatalog.EARTH(5), ShardCatalog.NATURE(1), ShardCatalog.POISON(8)]), false), // Jaegar look at last 3 params
    Get.Item.Note(905, 904, 'Burnt Crab', 0, 593),
    {
        id: 906,
        name: 'Soul Coins',
        noted: false,
        value: 12,
        stackable: true,
        description: 'Coins gifted to you from death himself.',
        requirements: ItemDetail.build([
            ItemDetail.levelSkillDetail(1, 17, 'INCINERATE'),
        ]),
        spriteIndex: 594,
        itemGroup: 0,
        essenceValue: EssenceValue(1, 0, [ShardCatalog.METAL(1), ShardCatalog.SOUL(2)]),
    },
    Get.Item.Food(907, 908, 'Cupcake', 1, 1, 595, 'A cute little cupcake!', EssenceValue(2, 2, [ShardCatalog.EARTH(5), ShardCatalog.NATURE(4), ShardCatalog.FIRE(5)]), false),
    Get.Item.Note(908, 907, 'Cupcake', 22, 595),
    {
        id: 909,
        name: 'Crowns',
        stackable: true,
        noted: false,
        value: 0,
        tradeable: false,
        description: 'Currency used to buy items from the shop.',
        spriteIndex: 772,
    },
    (() => {
        let helm = Get.Item.FullHelm(910, 911, 'Shell Helmet', 1, 340, 315, -1, 5, [0, 0, 12, 0, 0, 4, -4, -4, 0]);
        helm.model.HEAD_WORN.position.x -= 0.15;
        helm.model.HEAD_WORN.position.y -= 0.45;
        helm.model.HEAD_WORN.sprite = 'shellHelm';
        helm.model.HEAD_WORN.spriteID = 1;
        return helm;
    })(),
    Get.Item.Note(911, 910, 'Shell Helmet', 340, 315),
    Get.Item.CosmeticHatBeanie(912, 0, 'Artisan Hat', 'A basic artisan hat', 596 ),
    Get.Item.CosmeticHatBeanie(913, 1, 'Artisan Hat', 'A quality artisan hat', 597 ),
    Get.Item.CosmeticHatBeanie(914, 2, 'Artisan Hat', 'A hat made for a skilled artisan', 598 ),
    Get.Item.CosmeticHatBeanie(915, 3, 'Artisan Hat', 'A hat made for the journeyman artisan', 599 ),
    Get.Item.CosmeticHatBeanie(916, 4, 'Artisan Hat', 'A legendary hat intended for the master artisan', 600 ),
    Get.Item.CosmeticShirt(917, 5, 'Artisan Shirt', 'A basic artisan shirt', 601 ),
    Get.Item.CosmeticShirt(918, 6, 'Artisan Shirt', 'A quality artisan shirt', 602 ),
    Get.Item.CosmeticShirt(919, 7, 'Artisan Shirt', 'A shirt made for a skilled artisan', 603 ),
    Get.Item.CosmeticShirt(920, 8, 'Artisan Shirt', 'A shirt made for a journeyman artisan', 604 ),
    Get.Item.CosmeticShirt(921, 9, 'Artisan Shirt', 'A legendary shirt intended for the master artisan', 605 ),
    Get.Item.CosmeticPants(922, 10, 'Artisan Pants', 'A pair of basic artisan pants', 606 ),
    Get.Item.CosmeticPants(923, 11, 'Artisan Pants', 'A quality pair of artisan pants', 607 ),
    Get.Item.CosmeticPants(924, 12, 'Artisan Pants', 'A pair of pants for a skilled artisan', 608 ),
    Get.Item.CosmeticPants(925, 13, 'Artisan Pants', 'A pair of pants, journeyman artisan pants.', 609 ),
    Get.Item.CosmeticPants(926, 14, 'Artisan Pants', 'A legendary pair of pants intended for the master artisan', 610 ),
    Get.Item.CosmeticHatAnimalWithTail(927, 15, 'Trapper Hat', 'A basic trapper hat', 611 ),
    Get.Item.CosmeticHatAnimalWithTail(928, 16, 'Trapper Hat', 'A quality trapper hat', 612 ),
    Get.Item.CosmeticHatAnimalWithTail(929, 17, 'Trapper Hat', 'A majestic hat fit for the king of the jungle', 613 ),
    Get.Item.CosmeticHatAnimalWithTail(930, 18, 'Trapper Hat', 'A trapper hat made for night time stalking', 614 ),
    Get.Item.CosmeticHatAnimalWithTail(931, 19, 'Trapper Hat', 'A jeweled trapper hat, why not', 615 ),
    Get.Item.CosmeticShirt(932, 20, 'Trapper Shirt', 'A basic trapper hat', 616 ),
    Get.Item.CosmeticShirt(933, 21, 'Trapper Shirt', 'A quality trapper hat', 617 ),
    Get.Item.CosmeticShirt(934, 22, 'Trapper shirt', 'Be the king of the jungle with this trapper shirt', 618 ),
    Get.Item.CosmeticShirt(935, 23, 'Trapper Shirt', 'A shadow trapper shirt, they wont see you coming', 619 ),
    Get.Item.CosmeticShirt(936, 24, 'Trapper Shirt', 'A legendary jeweled trapper shirt', 620 ),
    Get.Item.CosmeticPants(937, 25, 'Trapper Pants', 'A pair of basic trapper pants', 621 ),
    Get.Item.CosmeticPants(938, 26, 'Trapper Pants', 'A quality pair of trapper pants', 622 ),
    Get.Item.CosmeticPants(939, 27, 'Trapper Pants', 'Move with the speed and grace of the tiger', 623 ),
    Get.Item.CosmeticPants(940, 28, 'Trapper Pants', 'A pair of dark trapper pants, made for stealth', 624 ),
    Get.Item.CosmeticPants(941, 29, 'Trapper Pants', 'A legendary pair of jeweled trapper pants', 625 ),
    Get.Item.CosmeticHat(942, 30, 'Deputy Hat', 'A hat for fresh recruits', 626 ),
    Get.Item.CosmeticHat(943, 31, 'Sheriff Hat', 'A hat that should come with a moustache', 627, 0.7 ),
    Get.Item.CosmeticHat(944, 32, 'Detective Hat', 'A hat for special operatives', 628, 0.7 ),
    Get.Item.CosmeticShirt(945, 33, 'Deputy Shirt', 'A shirt for fresh recruits', 629 ),
    Get.Item.CosmeticShirt(946, 34, 'Sheriff Shirt', 'A shirt with a badge, put some respect on it', 630 ),
    Get.Item.CosmeticShirt(947, 35, 'Detective Hat', 'A shirt with authority and power', 631 ),
    Get.Item.CosmeticPants(948, 36, 'Deputy Pants', 'A pair of recuit pants', 632 ),
    Get.Item.CosmeticPants(949, 37, 'Sheriff Pants', 'A clean pair of uniform pants', 633 ),
    Get.Item.CosmeticPants(950, 38, 'Detective Pants', 'A pair of pants, extra uniform', 634 ),
    Get.Item.CosmeticHat(951, 39, 'Jester Hat', 'A novice jester hat', 635, 0.78, 0.58 ),
    Get.Item.CosmeticHatJester(952, 40, 'Jester Hat', 'A hat for the confused jester', 636),
    Get.Item.CosmeticHatJester(953, 41, 'Jester Hat', 'A jester hat thats sure to make anyone laugh ', 637 ),
    Get.Item.CosmeticHatJester(954, 42, 'Jester Hat', 'A magical jester hat, just try not to laugh', 638 ),
    Get.Item.CosmeticShirt(955, 43, 'Jester Shirt', 'A novice jester shirt', 639 ),
    Get.Item.CosmeticShirt(956, 44, 'Jester Shirt', 'Unsure of yourself? Buy this', 640 ),
    Get.Item.CosmeticShirtJesterFancyShoulder(957, 45, 'Jester Shirt', 'Why is this shirt happier than me', 641 ),
    Get.Item.CosmeticShirtJesterFancyShoulder(958, 46, 'Jester Shirt', 'A shirt packed with jester magic', 642 ),
    Get.Item.CosmeticPants(959, 47, 'Jester Pants', 'A pair of pants for the novice jester', 643 ),
    Get.Item.CosmeticPants(960, 48, 'Jester Pants', 'A blue pair of pants for a blue jester', 644 ),
    Get.Item.CosmeticPants(961, 49, 'Jester Pants', 'Hungry knees', 645 ),
    Get.Item.CosmeticPants(962, 50, 'Jester Pants ', 'A pair of pants, made for magical roundhouse kicks', 646 ),
    Get.Item.CosmeticHat(963, 51, 'Hustler Hat', 'A hat made for the hustle', 647 ),
    Get.Item.CosmeticHat(964, 52, 'Hustler Hat', 'A flashy hustler hat', 648),
    Get.Item.CosmeticHat(965, 53, 'Hustler Hat', 'Attract unwanted attention in this hat', 649, 0.725 ),
    Get.Item.CosmeticHat(966, 54, 'Hustler Hat', 'A hat made for the Boss.', 650, 0.7 ),
    Get.Item.CosmeticShirtHustler(967, 55, 'Hustler Jacket', 'A hard hustler jacket', 651 ),
    Get.Item.CosmeticShirtHustler(968, 56, 'Hustler Jacket', 'The return of the mack', 652 ),
    Get.Item.CosmeticShirtHustler(969, 57, 'Hustler Jacket', 'A sinister jacket for the sinister individual', 653 ),
    Get.Item.CosmeticShirtHustler(970, 58, 'Hustler Jacket', 'For the Boss only', 654 ),
    Get.Item.CosmeticPants(971, 59, 'Hustler Pants', 'A pair of pants for the hustler', 655 ),
    Get.Item.CosmeticPants(972, 60, 'Hustler Pants', 'A slick pair of pants', 656 ),
    Get.Item.CosmeticPants(973, 61, 'Hustler Pants', 'Pants made for the mysterious hustler', 657 ),
    Get.Item.CosmeticPants(974, 62, 'Hustler Pants', 'Only the boss can fill these shoes', 658 ),
    Get.Item.CosmeticSunglasses(975, 63, 'Blindfold', 'A raggedy blindfold', 659 ),
    Get.Item.CosmeticSunglasses(976, 64, 'Blindfold', 'A shredded piece of silk cloth', 660),
    Get.Item.CosmeticSunglasses(977, 65, 'Blindfold', 'Pure as bloodied snow', 661 ),
    Get.Item.CosmeticSunglasses(978, 66, 'Eyepatch', 'Your skill in combat saved one eye at least', 662, 0.68 ),
    (()=> {
        let result = Get.Item.CosmeticShirt(979, 67, 'Adventurer Shirt', 'A shirt for the skilled archer', 663 );
        result.model.RIGHT_SHOULDER_WORN_SHIRT.position.y -= 0.05;
        result.model.RIGHT_SHOULDER_WORN_SHIRT.position.x += 0.1;
        result.model.LEFT_SHOULDER_WORN_SHIRT.position.y -= 0.05;
        result.model.LEFT_SHOULDER_WORN_SHIRT.position.x -= 0.1;
        result.model.LEFT_FOREARM_WORN_SHIRT.position.y += 0.375;
        result.model.RIGHT_FOREARM_WORN_SHIRT.position.y += 0.375
        result.model.RIGHT_FOREARM_WORN_SHIRT.position.x -= 0.05;
        result.model.LEFT_FOREARM_WORN_SHIRT.position.x += 0.05;
        return result;
    })(),
    (()=> {
        let result = Get.Item.CosmeticShirt(980, 68, 'Adventurer Shirt', 'A shirt for the skilled sword wielder', 664 );
        result.model.RIGHT_SHOULDER_WORN_SHIRT.position.y -= 0.05;
        result.model.RIGHT_SHOULDER_WORN_SHIRT.position.x += 0.075;
        result.model.LEFT_SHOULDER_WORN_SHIRT.position.y -= 0.05;
        result.model.LEFT_SHOULDER_WORN_SHIRT.position.x -= 0.09;
        result.model.LEFT_FOREARM_WORN_SHIRT.position.y += 0.375;
        result.model.RIGHT_FOREARM_WORN_SHIRT.position.y += 0.375
        result.model.RIGHT_FOREARM_WORN_SHIRT.position.x -= 0.05;
        result.model.LEFT_FOREARM_WORN_SHIRT.position.x += 0.05;
        return result;
    })(),
    (()=> {
        let result = Get.Item.CosmeticShirt(981, 69, 'Adventurer Shirt', 'The shirt trusted by rich adventurers everywhere', 665 );
        result.model.CHEST_WORN_SHIRT.position.x -= 0.3;
        result.model.CHEST_WORN_SHIRT.position.y -= 0.1;
        result.model.RIGHT_SHOULDER_WORN_SHIRT.position.y -= 0.05;
        result.model.RIGHT_SHOULDER_WORN_SHIRT.position.x += 0.1;
        result.model.LEFT_SHOULDER_WORN_SHIRT.position.y -= 0.05;
        result.model.LEFT_SHOULDER_WORN_SHIRT.position.x += 0.04;
        result.model.LEFT_FOREARM_WORN_SHIRT.position.y += 0.375;
        result.model.RIGHT_FOREARM_WORN_SHIRT.position.y += 0.375
        result.model.RIGHT_FOREARM_WORN_SHIRT.position.x -= 0.05;
        result.model.LEFT_FOREARM_WORN_SHIRT.position.x += 0.05;
        return result;
    })(),
    (()=> {
        let result = Get.Item.CosmeticShirt(982, 70, 'Adventurer Shirt', 'The legendary adventurers legendary shirt of legend', 666 );
        result.model.CHEST_WORN_SHIRT.position.x -= 0.3;
        result.model.CHEST_WORN_SHIRT.position.y -= 0.1;
        result.model.RIGHT_SHOULDER_WORN_SHIRT.position.x += 0.1;
        result.model.RIGHT_SHOULDER_WORN_SHIRT.position.y -= 0.08;

        result.model.LEFT_SHOULDER_WORN_SHIRT.position.x -= 0.1;
        result.model.LEFT_SHOULDER_WORN_SHIRT.position.y -= 0.08;


        result.model.TOP_UNDER =  {
            id: 'TOP_UNDER',
            asset: 'chestParts',
            sprite: 'cosmeticChest',
            parent: 'CORE',
            spriteID: '70b',
            anchor: { x: 0.6, y: 0.3 },
            position: { x: 0.05, y: -0.55 },
            z : -10,
        };

        result.model.LEFT_FOREARM_WORN_SHIRT.position.y += 0.375;
        result.model.RIGHT_FOREARM_WORN_SHIRT.position.y += 0.375
        result.model.RIGHT_FOREARM_WORN_SHIRT.position.x -= 0.05;
        result.model.LEFT_FOREARM_WORN_SHIRT.position.x += 0.05;

        return result;
    })(),
    (()=> {
        let result = Get.Item.CosmeticPants(983, 71, 'Adventurer Pants', 'A pair of pants with a quiver', 667 );
        result.model.LEFT_THIGH_WORN_PANTS.position.x -= 0.1;
        result.model.RIGHT_THIGH_WORN_PANTS.position.x += 0.1;
        result.model.LEFT_THIGH_WORN_PANTS.anchor = { x : 0.45, y : 0.4};
        return result;
    })(),
    (()=> {
        let result = Get.Item.CosmeticPants(984, 72, 'Adventurer Pants', 'A quality pair of pants with a sword sheath', 668 );
        result.model.LEFT_THIGH_WORN_PANTS.position.x -= 0.1;
        result.model.RIGHT_THIGH_WORN_PANTS.position.x += 0.1;
        result.model.LEFT_THIGH_WORN_PANTS.anchor = { x : 0.45, y : 0.58};
        return result;
    })(),
    (()=> {
        let result = Get.Item.CosmeticPants(985, 73, 'Adventurer Pants', 'Comes with a pouch for all your gold', 669 );
        result.model.LEFT_THIGH_WORN_PANTS.position.x -= 0.1;
        result.model.RIGHT_THIGH_WORN_PANTS.position.x += 0.1;
        result.model.LEFT_THIGH_WORN_PANTS.anchor = { x : 0.45, y : 0.3 };
        return result;
    })(),
    (()=> {
        let result = Get.Item.CosmeticPants(986, 74, 'Adventurer Pants', 'Not just pants, the best pants', 670 );
        result.model.LEFT_THIGH_WORN_PANTS.position.x -= 0.1;
        result.model.RIGHT_THIGH_WORN_PANTS.position.x += 0.1;
        result.model.LEFT_THIGH_WORN_PANTS.anchor = { x : 0.45, y : 0.3 };
        return result;
    })(),
    Get.Item.CosmeticHatFriendlyFire(987, 75, 'Friendly Fire', 'A novice mistake', 671 ),
    Get.Item.CosmeticHatFriendlyFire(988, 76, 'Friendly Fire', 'A training accident', 672 ),
    Get.Item.CosmeticHatFriendlyFire(989, 77, 'Friendly Fire', 'A battlefield mishap', 673 ),
    Get.Item.CosmeticHatFriendlyFire(990, 78, 'Friendly Fire', 'Tis but a scratch', 674 ),
    Get.Item.CosmeticHatFriendlyFire(991, 79, 'Friendly Fire', 'A flesh wound', 675 ),
    Get.Item.CosmeticHatFriendlyFire(992, 80, 'Friendly Fire', 'Some say its lucky', 676 ),
    Get.Item.CosmeticHat(993, 81, 'Headshot', 'A blunt arrow to the head', 677 ),
    Get.Item.CosmeticHat(994, 82, 'Headshot', 'A friendly mistake', 678 ),
    Get.Item.CosmeticHat(995, 83, 'Headshot', 'Id call that a make', 679 ),
    Get.Item.CosmeticHat(996, 84, 'Headshot', 'Never has an injury looked this good', 680 ),
    Get.Item.CosmeticHat(997, 85, 'Scholar Hat', 'An apprentice scholar hat', 681, 0.925 ),
    Get.Item.CosmeticHat(998, 86, 'Scholar Hat', 'A quality hat for a scholar', 682, 0.925 ),
    Get.Item.CosmeticHat(999, 87, 'Scholar Hat', 'A hat for a learned scholar', 683, 0.58 ),
    Get.Item.CosmeticHat(1000, 88, 'Scholar Hat', 'A hat signifying grand wisdom', 684, 0.58 ),
    Get.Item.CosmeticHat(1001, 89, 'Scholar Hat', 'A hat made for the wisest in the land', 685, 0.58 ),
    Get.Item.CosmeticHat(1002, 90, 'Frog Hat', 'A basic frog', 686 ),
    Get.Item.CosmeticHat(1003, 91, 'Frog Hat', 'A quality frog', 687 ),
    Get.Item.CosmeticHat(1004, 92, 'Frog Hat', 'A rare blue frog', 688 ),
    Get.Item.CosmeticHat(1005, 93, 'Frog Hat', 'A legendary pink frog', 689 ),
    Get.Item.CosmeticHat(1006, 94, 'Frog Hat', 'One frog to rule them all', 690 ),
    Get.Item.CosmeticHat(1007, 95, 'Fox Face', 'A cute fox', 691, 0.5 ),
    Get.Item.CosmeticHat(1008, 96, 'Fox Face', 'A brown fox', 692, 0.5 ),
    Get.Item.CosmeticHat(1009, 97, 'Fox Face', 'A snow fox', 693, 0.5 ),
    Get.Item.CosmeticHat(1010, 98, 'Fox Face', 'A sly fox', 694, 0.5 ),
    Get.Item.CosmeticHat(1011, 99, 'Fox Face', 'A magical fox', 695, 0.5 ),
    Get.Item.CosmeticHat(1012, 100, 'Fox Face', 'Foxy Cleopatra', 696, 0.5 ),
    Get.Item.CosmeticHat(1013, 101, 'Top Hat', 'A basic top hat for a basic fellow', 697, 0.95 ),
    Get.Item.CosmeticHat(1014, 102, 'Top Hat', 'A basic top hat with a little extra', 698, 0.625 ),
    Get.Item.CosmeticHat(1015, 103, 'Top Hat', 'A basic top hat for a regular fellow', 699, 0.95 ),
    Get.Item.CosmeticHat(1016, 104, 'Top Hat', 'A quality top hat for a quality individual', 700, 0.95 ),
    Get.Item.CosmeticHat(1017, 105, 'Top Hat', 'A top quality top hat with a monocle', 701, 0.625 ),
    (() => {
        let result = Get.Item.CosmeticHat(1018, 106, 'Top Hat', 'Only the priveleged have even set eyes upon this hat', 702 );
        result.model.HEAD_WORN.anchor.y = 0.6;
        return result;
    })(),
    Get.Item.CosmeticHat(1019, 107, 'Ski Hat', 'Low light conditions', 703, 0.7 ),
    Get.Item.CosmeticHat(1020, 108, 'Ski Hat', 'Where is the snow', 704, 0.7 ),
    Get.Item.CosmeticHat(1021, 109, 'Ski Hat', 'Sponsored rider', 705, 0.7 ),
    Get.Item.CosmeticSunglasses(1022, 110, 'Heart Shades', 'Glasses thatll have you feelin the love', 706 ),
    Get.Item.CosmeticSunglasses(1023, 111, 'Aviators', 'Big glasses for a big personality', 707 ),
    Get.Item.CosmeticSunglasses(1024, 112, 'Crewmasters', 'Master the dancefloor', 708 ),
    Get.Item.CosmeticSunglasses(1025, 113, 'The Chads', 'Oh yeah, its Chad time', 709 ),
    Get.Item.CosmeticSunglasses(1026, 114, 'Cat Eye', 'Feelin feline?', 710 ),
    Get.Item.CosmeticSunglasses(1027, 115, 'O Frames', 'Think your eyes are too big?', 711, 0.6 ),
    Get.Item.CosmeticSunglasses(1028, 116, 'O Frames', 'Prove that time travel is possible with these', 712, 0.55 ),
    Get.Item.CosmeticSunglasses(1029, 117, 'Daft Visor', 'Rock some robots with this visor', 713, 0.55 ),
    Get.Item.CosmeticSunglasses(1030, 118, 'Teller Brim', 'All I see is green', 714, 0.85 ),
    Get.Item.CosmeticSunglasses(1031, 119, 'Goggles', 'Some nice sunny day goggles', 715 ),
    Get.Item.CosmeticSunglasses(1032, 120, 'Goggles', 'Some sick frames', 716 ),
    Get.Item.CosmeticSunglasses(1033, 121, 'Money Trees', 'Perfect place for shade', 717 ),
    Get.Item.CosmeticSunglasses(1034, 122, 'Aviators', 'Dragon pilot standard issue', 718 ),
    Get.Item.CosmeticSunglasses(1035, 123, 'Glasses', 'Some standard frame glasses', 719 ),
    (()=> {
        let result = Get.Item.CosmeticSunglasses(1036, 124, 'Monocle', 'Look like an oil baron', 720 );
        result.model.HEAD_WORN.anchor = { x : 0.2, y : 0.2 };
        result.model.HEAD_WORN.position = { x : 0.15, y : -0.42 }
        return result;
    })(),
    (()=> {
        let result = Get.Item.CosmeticSunglasses(1037, 125, 'Monocle', 'Look like a cyborg oil baron', 721 );
        result.model.HEAD_WORN.anchor = { x : 0.8, y : 0.2 };
        result.model.HEAD_WORN.position = { x : 0.235, y : -0.38 }
        return result;
    })(),
    Get.Item.CosmeticSunglasses(1038, 126, 'Aviators', 'Stylish, not aerodynamic', 722),
    Get.Item.CosmeticSunglasses(1039, 127, 'Glasses', 'Study up', 723 ),
    Get.Item.CosmeticSunglasses(1040, 128, 'Cat Eye', 'Sales of these will improve the lives of in-game cats ', 724 ),
    Get.Item.CosmeticSunglasses(1041, 129, 'Pink Visor', 'Now that\'s stylish', 725, 0.68),
    Get.Item.CosmeticSunglasses(1042, 130, 'Goggles', 'Some solid blue shades', 726 ),
    Get.Item.CosmeticHat(1043, 131, 'Crab Hat', 'Save a crab, ride a fisherman', 727 ),
    Get.Item.CosmeticHat(1044, 132, 'Coconut Hat', 'Protection from falling coconuts', 728, 1 ),
    Get.Item.CosmeticHat(1045, 133, 'Octopus Hat', 'A slimy blue octopus', 729 ),
    Get.Item.CosmeticHat(1046, 134, 'Octopus Hat', 'An octopus, the purple kind', 730 ),
    Get.Item.CosmeticHat(1047, 135, 'Octopus Hat', 'An angry red octopus', 731 ),
    Get.Item.CosmeticHatBear(1048, 136, 'Bear Mask', 'A golden cub mask', 732 ),
    Get.Item.CosmeticHatBear(1049, 137, 'Bear Mask', 'Be the ranger Yogi needs', 733 ),
    Get.Item.CosmeticHatBear(1050, 138, 'Bear Mask', 'A jeweled up bear mask', 734 ),
    Get.Item.CosmeticShirt(1051, 139, 'Shirt and Tie', 'A green shirt for fancy occasions', 735 ),
    Get.Item.CosmeticShirt(1052, 140, 'Shirt and Tie', 'A cool shirt with a cooler tie', 736 ),
    Get.Item.CosmeticShirt(1053, 141, 'Shirt and Tie', 'A fancy shirt for formal people', 737 ),
    Get.Item.CosmeticPants(1054, 142, 'Pants', 'A fresh new look', 738 ),
    Get.Item.CosmeticPants(1055, 143, 'Pants', 'Cool pants for cooler people', 739 ),
    Get.Item.CosmeticPants(1056, 144, 'Pants', 'A common pair that can be worn with any shirt', 740 ),
    Get.Item.CosmeticShirt(1057, 145, 'Cashier Shirt', 'A cashier shirt from the popular Minchin Mishers\' restaurant', 741 ),
    Get.Item.CosmeticShirt(1058, 146, 'Supervisor Shirt', 'A shirt worn by someone who directs the work of others', 742 ),
    Get.Item.CosmeticShirt(1059, 147, 'Manager Shirt', 'A look granted to only the the cream of the crop', 743 ),
    Get.Item.CosmeticPants(1060, 148, 'Cashier Pants', 'Pants from the popular Minchin Misher\'s restaurant', 744 ),
    Get.Item.CosmeticPants(1061, 149, 'Supervisor Pants', 'Pants branded with the symbol of success', 745 ),
    Get.Item.CosmeticPants(1062, 150, 'Manager Pants', 'These pants come with big shoes to fill', 746 ),
    Get.Item.CosmeticShortSleeveShirt(1063, 151, 'Floral Shirt', 'Perfect to wear on vacation', 747 ),
    Get.Item.CosmeticShortSleeveShirt(1064, 152, 'Dollar Shirt', 'A fancy look for the coolest of the cool', 748 ),
    Get.Item.CosmeticShortSleeveShirt(1065, 153, 'Short Sleeves', 'A clean short sleeve shirt', 749 ),
    Get.Item.CosmeticShirt(1066, 154, 'Vest', 'A green shirt with a brown vest', 750 ),
    Get.Item.CosmeticShirt(1067, 155, 'Vest', 'A blue shirt with a brown vest', 751 ),
    Get.Item.CosmeticShirt(1068, 156, 'Vest', 'A red and yellow striped shirt with a vest', 752 ),
    Get.Item.CosmeticShirt(1069, 157, 'Vest', 'A purple shirt with a gray and gold vest', 753 ),
    Get.Item.CosmeticShirt(1070, 158, 'Vest', 'A checkered shirt with a vest', 754 ),
    Get.Item.CosmeticShirt(1071, 159, 'Vest', 'A checkered shirt with a vest', 755 ),
    Get.Item.CosmeticShortSleeveShirt(1072, 160, 'Plaid Shirt', 'Perfect for cutting down King Maples', 756 ),
    Get.Item.CosmeticShortSleeveShirt(1073, 161, 'Striped Shirt', 'A nice green striped pattern', 757 ),
    Get.Item.CosmeticShortSleeveShirt(1074, 162, 'Plaid Shirt', 'A simple plaid shirt', 758 ),
    Get.Item.CosmeticHat(1075, 163, 'Beanie', 'A cool beanie', 759, 0.95 ),
    Get.Item.CosmeticHat(1076, 164, 'Beanie', 'A fresh beanie', 760, 0.95 ),
    Get.Item.CosmeticHat(1077, 165, 'Beanie', 'A chill beanie', 761, 0.95 ),
    Get.Item.CosmeticHat(1078, 166, 'Beanie', 'A beautiful beanie', 762, 0.95 ),
    Get.Item.CosmeticHat(1079, 167, 'Beanie', 'A lit beanie', 763, 0.95 ),
    Get.Item.CosmeticHat(1080, 168, 'Beanie', 'A gothic beanie', 764, 0.95 ),
    Get.Item.CosmeticHat(1081, 169, 'Toque', 'What commoners may call a beanie', 765, 0.9, 0.575 ),
    Get.Item.CosmeticHat(1082, 170, 'Toque', 'A yellow toque for yellow boots', 766, 0.9, 0.575 ),
    Get.Item.CosmeticHat(1083, 171, 'Toque', 'A fancy green toque', 767, 0.9, 0.575 ),
    Get.Item.CosmeticHat(1084, 172, 'Toque', 'A cool purple toque', 768, 0.9, 0.575 ),
    Get.Item.CosmeticHat(1085, 173, 'Toque', 'Flaming hot toque', 769, 0.9, 0.575 ),
    Get.Item.CosmeticHat(1086, 174, 'Toque', 'Simple gray toque', 770, 0.9, 0.575 ),
]);

var ItemName = [];

const buildNames = () => {
    for (let i = 0, le = Item.length; i < le; ++i) {
        if (Item[i].noted) {
            ItemName.push(null);
            continue;
        }
        ItemName.push(Item[i].name);
    }
    Object.freeze(ItemName);
}
buildNames();

module.exports.ItemName = ItemName;
module.exports.Item = Item;